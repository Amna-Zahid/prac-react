[{"D:\\dev\\pennyworth-adminpanel\\src\\index.tsx":"1","D:\\dev\\pennyworth-adminpanel\\src\\reportWebVitals.ts":"2","D:\\dev\\pennyworth-adminpanel\\src\\containers\\App\\index.tsx":"3","D:\\dev\\pennyworth-adminpanel\\src\\store\\index.ts":"4","D:\\dev\\pennyworth-adminpanel\\src\\themes\\index.ts":"5","D:\\dev\\pennyworth-adminpanel\\src\\store\\localStorage.ts":"6","D:\\dev\\pennyworth-adminpanel\\src\\store\\actions\\goalActions.ts":"7","D:\\dev\\pennyworth-adminpanel\\src\\containers\\root\\index.tsx":"8","D:\\dev\\pennyworth-adminpanel\\src\\store\\reducers\\index.ts":"9","D:\\dev\\pennyworth-adminpanel\\src\\containers\\App\\history.ts":"10","D:\\dev\\pennyworth-adminpanel\\src\\store\\types\\index.ts":"11","D:\\dev\\pennyworth-adminpanel\\src\\store\\reducers\\goalsReducer.ts":"12","D:\\dev\\pennyworth-adminpanel\\src\\api\\GoalsApi\\index.ts":"13","D:\\dev\\pennyworth-adminpanel\\src\\routes\\index.ts":"14","D:\\dev\\pennyworth-adminpanel\\src\\components\\NavDrawer\\index.tsx":"15","D:\\dev\\pennyworth-adminpanel\\src\\components\\Router\\index.tsx":"16","D:\\dev\\pennyworth-adminpanel\\src\\components\\Loading\\index.tsx":"17","D:\\dev\\pennyworth-adminpanel\\src\\routes\\routes.ts":"18","D:\\dev\\pennyworth-adminpanel\\src\\components\\Router\\Public.tsx":"19","D:\\dev\\pennyworth-adminpanel\\src\\api\\index.ts":"20","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Policy\\terms.tsx":"21","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Policy\\index.tsx":"22","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Home\\index.tsx":"23","D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalAdd\\index.tsx":"24","D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalTips\\index.tsx":"25","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Policy\\styles.tsx":"26","D:\\dev\\pennyworth-adminpanel\\src\\hooks\\s3Upload.ts":"27","D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalTips\\styles.ts":"28","D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalAdd\\form.ts":"29","D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalAdd\\styles.ts":"30","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Home\\styles.ts":"31","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\Link.tsx":"32","D:\\dev\\pennyworth-adminpanel\\src\\hooks\\useLocalStorage.ts":"33","D:\\dev\\pennyworth-adminpanel\\src\\api\\Policy\\index.ts":"34","D:\\dev\\pennyworth-adminpanel\\src\\components\\BackNavigate\\index.tsx":"35","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\index.tsx":"36","D:\\dev\\pennyworth-adminpanel\\src\\components\\Goals\\index.ts":"37","D:\\dev\\pennyworth-adminpanel\\src\\components\\TipCard\\index.tsx":"38","D:\\dev\\pennyworth-adminpanel\\src\\components\\TabPanel\\index.tsx":"39","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\blockStyle.tsx":"40","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\linkStyle.tsx":"41","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\inlineStyle.tsx":"42","D:\\dev\\pennyworth-adminpanel\\src\\components\\Goals\\Container.tsx":"43","D:\\dev\\pennyworth-adminpanel\\src\\components\\Goals\\Item.tsx":"44","D:\\dev\\pennyworth-adminpanel\\src\\components\\TipCard\\CardNonEditable.tsx":"45","D:\\dev\\pennyworth-adminpanel\\src\\components\\TipCard\\CardEditable.tsx":"46","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\constants.tsx":"47","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\common.tsx":"48","D:\\dev\\pennyworth-adminpanel\\src\\components\\icons\\index.ts":"49","D:\\dev\\pennyworth-adminpanel\\src\\components\\icons\\EditIcon.tsx":"50"},{"size":807,"mtime":1632153322602,"results":"51","hashOfConfig":"52"},{"size":440,"mtime":1632153322603,"results":"53","hashOfConfig":"52"},{"size":695,"mtime":1632153322594,"results":"54","hashOfConfig":"52"},{"size":1304,"mtime":1632153322605,"results":"55","hashOfConfig":"52"},{"size":11916,"mtime":1632153322607,"results":"56","hashOfConfig":"52"},{"size":361,"mtime":1632153322605,"results":"57","hashOfConfig":"52"},{"size":2746,"mtime":1632153322604,"results":"58","hashOfConfig":"52"},{"size":982,"mtime":1632153322600,"results":"59","hashOfConfig":"52"},{"size":399,"mtime":1632153322606,"results":"60","hashOfConfig":"52"},{"size":89,"mtime":1632153322593,"results":"61","hashOfConfig":"52"},{"size":1976,"mtime":1632153322606,"results":"62","hashOfConfig":"52"},{"size":1179,"mtime":1632153322605,"results":"63","hashOfConfig":"52"},{"size":3073,"mtime":1632987847226,"results":"64","hashOfConfig":"52"},{"size":124,"mtime":1632153322603,"results":"65","hashOfConfig":"52"},{"size":3240,"mtime":1632153322585,"results":"66","hashOfConfig":"52"},{"size":228,"mtime":1632153322587,"results":"67","hashOfConfig":"52"},{"size":252,"mtime":1632153322584,"results":"68","hashOfConfig":"52"},{"size":1092,"mtime":1632153322604,"results":"69","hashOfConfig":"52"},{"size":229,"mtime":1632153322587,"results":"70","hashOfConfig":"52"},{"size":281,"mtime":1632988104692,"results":"71","hashOfConfig":"52"},{"size":3935,"mtime":1632153322599,"results":"72","hashOfConfig":"52"},{"size":4017,"mtime":1632153322599,"results":"73","hashOfConfig":"52"},{"size":9277,"mtime":1632153322597,"results":"74","hashOfConfig":"52"},{"size":40153,"mtime":1632987777840,"results":"75","hashOfConfig":"52"},{"size":13865,"mtime":1632987777843,"results":"76","hashOfConfig":"52"},{"size":1693,"mtime":1632153322599,"results":"77","hashOfConfig":"52"},{"size":4170,"mtime":1632988275563,"results":"78","hashOfConfig":"52"},{"size":1238,"mtime":1622019045490,"results":"79","hashOfConfig":"52"},{"size":3796,"mtime":1632987777838,"results":"80","hashOfConfig":"52"},{"size":5104,"mtime":1622019045479,"results":"81","hashOfConfig":"52"},{"size":928,"mtime":1632153322597,"results":"82","hashOfConfig":"52"},{"size":1161,"mtime":1632153322590,"results":"83","hashOfConfig":"52"},{"size":968,"mtime":1632153322602,"results":"84","hashOfConfig":"52"},{"size":735,"mtime":1632153322579,"results":"85","hashOfConfig":"52"},{"size":1147,"mtime":1632153322583,"results":"86","hashOfConfig":"52"},{"size":947,"mtime":1632153322591,"results":"87","hashOfConfig":"52"},{"size":192,"mtime":1632153322584,"results":"88","hashOfConfig":"52"},{"size":2115,"mtime":1632153322589,"results":"89","hashOfConfig":"52"},{"size":544,"mtime":1632153322588,"results":"90","hashOfConfig":"52"},{"size":1153,"mtime":1632153322591,"results":"91","hashOfConfig":"52"},{"size":3599,"mtime":1632153322592,"results":"92","hashOfConfig":"52"},{"size":1022,"mtime":1632153322592,"results":"93","hashOfConfig":"52"},{"size":1343,"mtime":1632153322584,"results":"94","hashOfConfig":"52"},{"size":3300,"mtime":1632153322584,"results":"95","hashOfConfig":"52"},{"size":2901,"mtime":1632153322589,"results":"96","hashOfConfig":"52"},{"size":3244,"mtime":1632153322589,"results":"97","hashOfConfig":"52"},{"size":1206,"mtime":1632153322591,"results":"98","hashOfConfig":"52"},{"size":958,"mtime":1632153322591,"results":"99","hashOfConfig":"52"},{"size":64,"mtime":1632153322593,"results":"100","hashOfConfig":"52"},{"size":882,"mtime":1632153322593,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"r8wccd",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"114","usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"173","usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"104"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"104"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"104"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"D:\\dev\\pennyworth-adminpanel\\src\\index.tsx",[],["220","221"],"D:\\dev\\pennyworth-adminpanel\\src\\reportWebVitals.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\containers\\App\\index.tsx",["222","223"],"import React, {Suspense} from 'react';\r\nimport Loading from \"components/Loading\";\r\nimport {Router as MainRouter, Switch} from \"react-router-dom\";\r\nimport routes from \"routes\"\r\nimport Router from \"components/Router\";\r\nimport history from \"./history\";\r\nimport NavDrawer from \"components/NavDrawer\";\r\nimport '../../App.css';\r\nimport Root from \"containers/root\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n            <Suspense fallback={<Loading />}>\r\n                <MainRouter history={history} >\r\n                    <Switch>\r\n                        <Router  component={Root} />\r\n\r\n                    </Switch>\r\n                </MainRouter>\r\n            </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\store\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\themes\\index.ts",["224","225","226"],"import {createMuiTheme, makeStyles, } from \"@material-ui/core\";\r\nimport type from \"@material-ui/lab/themeAugmentation\"\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        h1: {\r\n            fontFamily: \"'Asap', sans-serif\",\r\n            fontSize: '25px',\r\n            lineHeight: '29px',\r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            color: '#000000'\r\n        },\r\n        h2: {\r\n            fontFamily: \"'Asap', sans-serif\",\r\n            fontSize: '22px',\r\n            lineHeight: '25px',\r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            color: '#000000'\r\n        },\r\n        h3: {\r\n            fontFamily: \"'Asap', sans-serif\",\r\n            fontSize: '20px',\r\n            lineHeight: '23px',\r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            color: '#000000'\r\n        },\r\n        h4: {\r\n            fontFamily: \"'Asap', sans-serif\",\r\n            fontSize: '16px',\r\n            lineHeight: '18px',\r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            color: '#000000'\r\n        },\r\n        subtitle1: {\r\n            fontFamily: \"'Asap', sans-serif\",\r\n        },\r\n        body2: {\r\n            fontFamily: \"'Inter', sans-serif\",\r\n        },\r\n        caption: {\r\n            fontFamily: \"'Inter', sans-serif\",\r\n            color: '#94979F',\r\n        },\r\n        subtitle2: {\r\n            fontFamily: \"'Asap', sans-serif\",\r\n        }\r\n\r\n    },\r\n    overrides: {\r\n        MuiDialogActions: {\r\n            root: {\r\n                justifyContent: 'space-between',\r\n                '& .MuiButton-text': {\r\n                    '& .MuiButton-label': {\r\n                        color: '#0d2e6e',\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n        MuiPaper: {\r\n            root: {\r\n                '& .MuiMenu-paper': {\r\n                    backgroundColor: 'red',\r\n                    position: 'relative'\r\n                }\r\n            }\r\n        },\r\n        MuiContainer: {\r\n            root: {\r\n                ['@media (min-width:1280px)']: {\r\n                    maxWidth: 'none!important'\r\n                }\r\n            }\r\n        },\r\n        MuiTab: {\r\n            wrapper: {\r\n                textTransform: 'none'\r\n            }\r\n        },\r\n        MuiFormControlLabel: {\r\n            label: {\r\n                fontFamily: \"'Inter', sans-serif\",\r\n                fontSize: '14px',\r\n                color: '#737780',\r\n                lineHeight: '1.2',\r\n            }\r\n        },\r\n        MuiSvgIcon: {\r\n            root: {\r\n                color: '#0d2e6e'\r\n            }\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: 'none',\r\n                padding: '15px',\r\n                borderRadius: '8px',\r\n                '& .MuiButton-label': {\r\n                    fontFamily: \"'Asap', sans-serif\",\r\n                    fontSize: '16px',\r\n                    lineHeight: '18px',\r\n                    fontStyle: 'normal',\r\n                    textAlign: 'center',\r\n                    fontWeight: 600,\r\n                    margin: '0px 10px',\r\n                    color: '#FFF'\r\n                }\r\n            },\r\n            outlinedPrimary: {\r\n                border: '1.5px solid #0d2e6e',\r\n                '& .MuiButton-label': {\r\n                    color: '#0d2e6e'\r\n                }\r\n            },\r\n            textSizeLarge: {\r\n                width: '313px',\r\n                height: '48px',\r\n            },\r\n            containedPrimary: {\r\n                backgroundColor: '#0d2e6e'\r\n            }\r\n        },\r\n        MuiTableHead: {\r\n            root: {\r\n                '& .MuiTableRow-head': {\r\n                    '& .MuiTableCell-root': {\r\n                        backgroundColor: '#FFF',\r\n                        color: '#0d2e6e',\r\n                        borderBottomWidth: 0\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        MuiAutocomplete: {\r\n            root: {\r\n                height: 'auto',\r\n                maxHeight: 'none',\r\n                '& .MuiTextField-root': {\r\n                    height: 'auto',\r\n                    maxHeight: 'none',\r\n                }\r\n            },\r\n            listbox: {\r\n                '& .MuiAutocomplete-option[aria-selected=\"true\"]': {\r\n                    background: '#fff !important',\r\n                    position: 'relative',\r\n                    '&::after': {\r\n                        display: 'inline-block',\r\n                        content: `'✔'`,\r\n                        position: 'absolute',\r\n                        color: '#5939E3',\r\n                        right: '15px',\r\n                        top: 0\r\n                    },\r\n\r\n                }\r\n            },\r\n            tag: {\r\n                margin: 2,\r\n                color: '#FFF',\r\n                background: '#0d2e6e',\r\n                borderRadius: '4px',\r\n                padding: '4px',\r\n                height: 'auto',\r\n                fontSize: '11px',\r\n                fontFamily: 'Roboto'\r\n            },\r\n            inputRoot: {\r\n                margin: 0,\r\n                padding: '0 !important',\r\n                '& .MuiAutocomplete-input': {\r\n                    padding: '2px 16px !important'\r\n                }\r\n            }\r\n        },\r\n        MuiTableCell: {\r\n            root: {\r\n                fontSize: 10,\r\n                padding: '4px 0',\r\n                '& .MuiAvatar-circle': {\r\n                    width: 35,\r\n                    height: 35\r\n                }\r\n            }\r\n        },\r\n        MuiCheckbox: {\r\n        },\r\n        MuiTextField: {\r\n            root: {\r\n                '& .MuiInputBase-root.MuiInputBase-adornedEnd': {\r\n                    marginTop: 0,\r\n                    '& .MuiSvgIcon-root': {\r\n                        cursor: 'pointer',\r\n                        marginRight: 5\r\n                    }\r\n                },\r\n                '& .MuiInput-underline.Mui-focused': {\r\n                    borderColor: '#0d2e6e',\r\n                },\r\n                '& .MuiInput-underline.Mui-focused.Mui-error': {\r\n                    borderColor: '#EE4B63',\r\n                },\r\n                '& .MuiInput-underline.Mui-error': {\r\n                    borderColor: '#EE4B63'\r\n                },\r\n                '& .MuiFormHelperText-root': {\r\n                    fontSize: '12px',\r\n                    lineHeight: '16px',\r\n                    marginTop: '10px',\r\n                },\r\n                '& .MuiInput-input':  {\r\n                    fontFamily: \"'Inter', sans-serif\",\r\n                    padding: '0px 16px',\r\n                    fontWeight: 'normal',\r\n                    fontSize: '16px',\r\n                    lineHeight: '18px',\r\n                    letterSpacing: '0.03em',\r\n                    color: '#5E626B'\r\n                },\r\n                '& .MuiInput-input.Mui-disabled': {\r\n                    color: '#00000061'\r\n                },\r\n                '& .MuiSelect-nativeInput': {\r\n                    left: '-16px'\r\n                },\r\n                '& .MuiInputLabel-formControl': {\r\n                    zIndex: 2,\r\n                    fontFamily: \"'Inter', sans-serif\",\r\n                    fontStyle: 'italic',\r\n                    fontWeight: 'normal',\r\n                    fontSize: '12px',\r\n                    lineHeight: '12px',\r\n                    letterSpacing: '0.03em',\r\n                    margin: '2px 16px',\r\n                    transform: 'translate(0, 14px) scale(1)'\r\n                },\r\n                '& .MuiInputLabel-shrink': {\r\n                    transform: 'translate(0, 1.5px) scale(0.75)',\r\n                },\r\n                '& .MuiInputLabel-shrink.MuiFocused': {\r\n                    color: '#ff0000'\r\n                },\r\n                '& .MuiInput-underline': {\r\n                    height: '44px',\r\n                    background: '#F4F6F9',\r\n                    border: '1px solid #B0B3B9',\r\n                    borderRadius: '8px',\r\n                    margin: 0,\r\n                    padding: 0,\r\n                    width: '100%',\r\n                    '& .MuiInputAdornment-positionEnd': {\r\n                        '& .MuiIconButton-root': {\r\n                            padding: '0 6px 0 0 ',\r\n                            '& .MuiIconButton-label': {\r\n                                '& .MuiSvgIcon-root': {\r\n                                    fill: 'none'\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    '& .MuiSelect-icon': {\r\n                        top: 'calc(100% - 33px)'\r\n                    },\r\n                    '&::before': {\r\n                        content: '',\r\n                        borderBottom: '0px !important',\r\n                    },\r\n                    '&::after': {\r\n                        content: '',\r\n                        borderBottom: '0px !important',\r\n                    }\r\n                },\r\n                '& .MuiInput-multiline': {\r\n                    height: 'auto',\r\n                    paddingTop: 15\r\n                },\r\n                '& .MuiInputBase-adornedEnd' : {\r\n                    marginTop: '7px'\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport interface ISidebarBackgroundContainer {\r\n    background: string;\r\n}\r\n\r\n\r\nexport interface CustomStyleProps {\r\n    inlineWidth?: number;\r\n}\r\n\r\n\r\nconst useStyleClasses = makeStyles({\r\n    requiredInput: {\r\n        position: 'relative',\r\n        '&::after' : {\r\n            content: \"'*'\",\r\n            display: 'block',\r\n            position: 'absolute',\r\n            top: '0',\r\n            right: '-12px',\r\n            fontSize: '20px'\r\n        }\r\n    },\r\n    deleteIcon: {\r\n        color: '#fff',\r\n        width: '18px',\r\n        height: '18px'\r\n    },\r\n    disabledInput: {\r\n        '& .MuiInput-formControl.Mui-disabled': {\r\n            justifyContent: 'center',\r\n            background: '#F4F6F9',\r\n            borderColor: '#F4F6F9',\r\n            marginTop: 0,\r\n            '& .MuiInput-input.Mui-disabled': {\r\n                color: '#B0B3B98C',\r\n            }\r\n        }\r\n    },\r\n    main: {\r\n        marginLeft: '245px!important',\r\n        width: 'calc(100% - 245px)!important',\r\n        ['@media (min-width:1480px)']: {\r\n            marginLeft: '477px!important',\r\n            width: 'calc(100% - 477px)!important',\r\n        }\r\n    },\r\n    navigationHeader: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        margin: '10px 20px 10px 0px'\r\n    },\r\n    gradientHeader: {\r\n        textTransform: 'uppercase',\r\n        background: 'linear-gradient(270deg, #FFDA61 0%, #23D8C4 100%)',\r\n        '-webkit-background-clip': 'text',\r\n        '-webkit-text-fill-color': 'transparent',\r\n        display: 'inline-block',\r\n        fontWeight: 500,\r\n        fontSize: '18px',\r\n        lineHeight: '20px',\r\n    },\r\n    gradientHeader2: {\r\n        textTransform: 'uppercase',\r\n        marginBottom: '10px',\r\n        background: 'linear-gradient(270deg, #EE4B63 0%, #0d2e6e 100%)',\r\n        '-webkit-background-clip': 'text',\r\n        '-webkit-text-fill-color': 'transparent',\r\n        display: 'inline-block',\r\n        fontWeight: 500,\r\n        fontSize: '18px',\r\n        lineHeight: '20px',\r\n    },\r\n    submitContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        paddingRight: '40px',\r\n        '& .MuiButton-contained' : {\r\n            width: '115px',\r\n            height: '40px',\r\n            '& .MuiButton-label': {\r\n                fontSize: '14px'\r\n            }\r\n        }\r\n    },\r\n    inlineFormContainer: {\r\n        display: 'flex',\r\n        paddingBottom: '15px',\r\n        '& .MuiTextField-root': {\r\n            width:  '186px',\r\n            marginRight: '25px'\r\n        }\r\n    }\r\n});\r\nexport {\r\n    theme,\r\n    useStyleClasses,\r\n}\r\n","D:\\dev\\pennyworth-adminpanel\\src\\store\\localStorage.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\store\\actions\\goalActions.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\containers\\root\\index.tsx",["227","228","229","230"],"import React, {Suspense} from 'react';\r\nimport Loading from \"components/Loading\";\r\nimport {Router as MainRouter, Switch} from \"react-router-dom\";\r\nimport routes from \"routes\"\r\nimport Router from \"components/Router\";\r\nimport history from \"containers/App/history\";\r\nimport NavDrawer from \"components/NavDrawer\";\r\nimport '../../App.css';\r\n\r\n\r\n\r\nfunction Root() {\r\n\r\n    return (\r\n        <div className=\"parent-root\">\r\n            <NavDrawer />\r\n            <div className=\"main-container\">\r\n                {/*<Suspense fallback={<Loading />}>*/}\r\n                {/*    <MainRouter history={history} >*/}\r\n                        <Switch>\r\n                            {routes.map((route) => (\r\n                                <Router key={route.path} {...route} />\r\n                            ))}\r\n                        </Switch>\r\n                {/*    </MainRouter>*/}\r\n                {/*</Suspense>*/}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Root;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\store\\reducers\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\containers\\App\\history.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\store\\types\\index.ts",["231"],"import {GoalsOrderIds, ICategorizedGoals, IGoalTemplate, NewSortIndexes} from \"api/types\";\r\nimport {Dispatch} from \"react\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {IGoalFormWithImage} from \"containers/GoalAdd/form\";\r\n\r\nexport enum GoalActions  {\r\n    SET_GOALS = \"SET_GOALS\",\r\n    CURRENT_GOAL = \"CURRENT_GOAL\",\r\n    GOAL_CATEGORY = \"GOAL_CATEGORY\",\r\n    UPDATED_GOAL = \"UPDATED_GOAL\",\r\n    NEW_SORT_INDEXES = \"NEW_SORT_INDEXES\",\r\n    SORT_GOALS = \"SORT_GOALS\"\r\n}\r\nexport interface SetGoalAction {\r\n    type: GoalActions.SET_GOALS;\r\n    payload: ICategorizedGoals\r\n}\r\nexport interface SetNewSortIndexes {\r\n    type: GoalActions.NEW_SORT_INDEXES,\r\n    payload: NewSortIndexes;\r\n}\r\nexport interface SetCurrentGoalAction {\r\n    type: GoalActions.CURRENT_GOAL,\r\n    payload: CurrentGoal\r\n}\r\nexport interface SetGoalCategories {\r\n    type: GoalActions.GOAL_CATEGORY,\r\n    payload: string[]\r\n}\r\nexport interface SetGoalFormAction {\r\n    type: GoalActions.UPDATED_GOAL,\r\n    payload: IGoalFormWithImage\r\n}\r\nexport type AppActions = SetGoalAction\r\n    | SetCurrentGoalAction | SetGoalCategories\r\n    | SetGoalFormAction | SetNewSortIndexes;\r\nexport type ThunkActions = AppActions;\r\nexport type CurrentGoal = IGoalTemplate | null;\r\nexport interface AppState {\r\n    goals: ICategorizedGoals,\r\n    currentGoal: CurrentGoal;\r\n    goalCategories: string[];\r\n    updatedGoal: IGoalFormWithImage;\r\n    newSortIndexes: NewSortIndexes;\r\n}\r\nexport const initialState: AppState = {\r\n    goals: {\r\n        long: [],\r\n        medium: [],\r\n        short: []\r\n    },\r\n    currentGoal: null,\r\n    updatedGoal: null,\r\n    goalCategories: [],\r\n    newSortIndexes: {short: 1, medium: 1, long: 1}\r\n}\r\nexport type ThunkResults = Promise<ICategorizedGoals | void>;\r\nexport type AppThunkDispatch = ThunkDispatch<AppState, undefined, AppActions>;\r\nexport type AppDispatch = Dispatch<AppActions>;\r\nexport type AppThunk = ThunkAction<ThunkResults, AppState, unknown, ThunkActions>\r\n","D:\\dev\\pennyworth-adminpanel\\src\\store\\reducers\\goalsReducer.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\api\\GoalsApi\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\routes\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\NavDrawer\\index.tsx",["232","233","234","235","236","237","238"],"import React, {FC, useEffect} from \"react\";\r\nimport {makeStyles,Drawer, Typography, Divider,\r\n    ListItem, List, Theme, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport logoAlt from \"assets/logoAlt.svg\"\r\nimport {PeopleAlt, Search, Settings, Dashboard, Policy} from \"@material-ui/icons\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useHistory, useLocation} from \"react-router\";\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: '#0d2e6e'\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    logoNav: {\r\n        display: 'flex',\r\n        gap: 15,\r\n        alignItems: 'center',\r\n        '& img': {\r\n            maxWidth: '30px'\r\n        },\r\n        '& .MuiTypography-body2': {\r\n            fontSize: 20,\r\n            fontWeight: 500,\r\n            lineHeight: '25px',\r\n            color: '#FFF'\r\n        },\r\n        padding: '22px 0 22px 15px !important'\r\n\r\n    },\r\n    navActive: {\r\n        background: 'linear-gradient(270deg, #1b3566 0%, #1552c7 100%)',\r\n        '& .MuiListItemIcon-root': {\r\n            '& .MuiSvgIcon-root': {\r\n                color: '#fff!important'\r\n            }\r\n        },\r\n        '& .MuiListItemText-root': {\r\n            color: '#FFF!important'\r\n        }\r\n    }\r\n\r\n}));\r\n\r\nconst listIcons = [\r\n    <Dashboard style={{color: '#FFF'}} />,\r\n    <Policy style={{color: '#FFF'}} />,\r\n    <Policy style={{color: '#FFF'}} />,\r\n];\r\n\r\nconst NavDrawer: FC = () => {\r\n   const classes = useStyles();\r\n   const history = useHistory();\r\n   let {pathname} = useLocation();\r\n   console.log(pathname);\r\n   const routeTo = (route: string) => {\r\n       history.push(route);\r\n   }\r\n   const activeNav = (route: string): boolean => {\r\n       if (route === pathname || (['/', '/goalsAdd', '/goalTip'].includes(pathname) && route === '/')) {\r\n           return true;\r\n       }\r\n       return false;\r\n    }\r\n\r\n   return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            PaperProps={{ elevation: 4 }}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n            anchor=\"left\"\r\n        >\r\n            <div className={`${classes.drawerPaper} ${classes.logoNav}`} >\r\n                <img src={logoAlt}/>\r\n                <Typography variant=\"body2\"> Pennyworth</Typography>\r\n            </div>\r\n            <List style={{marginTop: 50}}>\r\n                {[{text: 'Goals hub', route: '/'}, {text: 'Privacy  policy', route: '/policy'}, {text: 'Terms & conditions', route: '/terms'}].map(({route, text}, index) => (\r\n                    <ListItem button key={text} className={`${activeNav(route) && classes.navActive}`}>\r\n                        <ListItemIcon>{listIcons[index]}</ListItemIcon>\r\n                        <ListItemText style={{color: '#FFF'}}  onClick={() => {routeTo(route)}}>\r\n                            {text}\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default NavDrawer;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\components\\Router\\index.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Loading\\index.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\routes\\routes.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Router\\Public.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\api\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\containers\\Policy\\terms.tsx",["239","240","241","242"],"import React, {FC, useEffect, useState} from \"react\";\r\nimport {Button, Container, Typography} from \"@material-ui/core\";\r\nimport {EditorState, Editor, convertToRaw, ContentState} from \"draft-js\";\r\nimport {EditorContainer, EditorWrapper, useStyle} from \"./styles\";\r\nimport {Toolbar} from \"components/Toolbar\";\r\nimport createLinkDecorator from \"components/Toolbar/Link\";\r\n\r\n\r\nimport 'draft-js/dist/Draft.css';\r\nimport \"./editor.css\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nimport {postTermsAndCondition, getTermsAndCondition} from \"api/Policy\";\r\nimport {stateToHTML} from \"draft-js-export-html\";\r\nimport Loading from \"../../components/Loading\";\r\nimport htmlToDraft from \"html-to-draftjs\";\r\n\r\nconst styledMap = {\r\n    \"header-one\": {\r\n        color: '#FF0000'\r\n    }\r\n}\r\n\r\n\r\nconst Terms: FC = () => {\r\n    const {root, contentContainer,submitContainer, navigationHeader, cancelBtn} = useStyle();\r\n    const decorator = createLinkDecorator();\r\n    const history = useHistory();\r\n    const updateState = (editorState: EditorState) => {\r\n        console.log(convertToRaw(editorState.getCurrentContent()));\r\n        setEditorState(editorState);\r\n    }\r\n    const onBack = () => {\r\n        history.push(\"/policy\");\r\n    }\r\n    const [loader, setLoader] = useState<boolean>(false);\r\n    const [editorState, setEditorState] = useState<EditorState>(() => EditorState.createEmpty(decorator));\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setLoader(true);\r\n            try {\r\n                const response = await getTermsAndCondition();\r\n                setLoader(false);\r\n                if (response.success) {\r\n                    const {contentBlocks, entityMap} = htmlToDraft(response.data.replaceAll('<br>', ''));\r\n                    const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\r\n                    console.log(contentState);\r\n                    setEditorState(() => EditorState.createWithContent(contentState, decorator));\r\n                }\r\n            } catch (e) {\r\n                setLoader(false);\r\n            }\r\n        })()\r\n    }, [])\r\n\r\n    const postTerms = async () => {\r\n        setLoader(true);\r\n        try {\r\n            const response = await postTermsAndCondition(stateToHTML(editorState.getCurrentContent()));\r\n            setLoader(false);\r\n            if(response.success) {\r\n                history.push(\"/\");\r\n            }\r\n        } catch (e) {\r\n            setLoader(false);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loader && <Loading/>}\r\n            <div className={root}>\r\n                <div className={contentContainer}>\r\n                    <Typography variant=\"h2\">\r\n                        Terms and condition\r\n                    </Typography>\r\n                    <EditorWrapper>\r\n                        <Toolbar editorState={editorState} setEditorState={updateState} />\r\n                        <EditorContainer>\r\n                            <Editor\r\n                                placeholder=\"write Terms & Condition\"\r\n                                editorState={editorState}\r\n                                onChange={updateState}\r\n                                customStyleMap={styledMap}\r\n                                // onChange={setEditorState}\r\n                            />\r\n                        </EditorContainer>\r\n                    </EditorWrapper>\r\n                </div>\r\n                <div className={submitContainer}>\r\n                    <Button className={cancelBtn} onClick={() => history.push('/')}   variant=\"contained\" size=\"small\" color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={postTerms}  type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">\r\n                        Save\r\n                    </Button>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Terms;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Policy\\index.tsx",["243","244","245"],"import React, {FC, useEffect, useState} from \"react\";\r\nimport {Button, Container, Typography} from \"@material-ui/core\";\r\nimport {EditorState, ContentState, Editor, convertToRaw} from \"draft-js\";\r\nimport {EditorContainer, EditorWrapper, useStyle} from \"./styles\";\r\nimport {Toolbar} from \"components/Toolbar\";\r\nimport {getPrivacyAndPolicy, postPrivacyAndPolicy} from \"api/Policy\";\r\nimport createLinkDecorator from \"components/Toolbar/Link\";\r\nimport {stateToHTML} from \"draft-js-export-html\";\r\nimport htmlToDraft from \"html-to-draftjs\";\r\n\r\n\r\nimport 'draft-js/dist/Draft.css';\r\nimport \"./editor.css\";\r\nimport {useHistory} from \"react-router\";\r\nimport Loading from \"../../components/Loading\";\r\n\r\n\r\nconst styledMap = {\r\n    \"header-one\": {\r\n        color: '#FF0000'\r\n    }\r\n}\r\n\r\n\r\nconst Policy: FC = () => {\r\n\r\n\r\n    const {root, contentContainer,submitContainer, cancelBtn} = useStyle();\r\n    const decorator = createLinkDecorator();\r\n    const history = useHistory();\r\n    const [loader, setLoader] = useState<boolean>(false);\r\n    const updateState = (editorState: EditorState) => {\r\n        console.log(convertToRaw(editorState.getCurrentContent()));\r\n        setEditorState(editorState);\r\n    }\r\n    const [editorState, setEditorState] = useState<EditorState>(() => EditorState.createEmpty(decorator));\r\n    editorState.getCurrentContent();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setLoader(true);\r\n            try {\r\n                const response = await getPrivacyAndPolicy();\r\n                setLoader(false);\r\n                if (response.success) {\r\n\r\n                    const {contentBlocks, entityMap} = htmlToDraft(response.data.replaceAll('<br>', ''));\r\n                    const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\r\n                    console.log(contentState);\r\n                    const editorState = EditorState.createWithContent(contentState)\r\n                    setEditorState(() => EditorState.createWithContent(contentState, decorator));\r\n                }\r\n            } catch (e) {\r\n                setLoader(false);\r\n            }\r\n        })()\r\n    }, [])\r\n    const postPolicy = async () => {\r\n        setLoader(true);\r\n        try {\r\n            const response = await postPrivacyAndPolicy(stateToHTML(editorState.getCurrentContent()));\r\n            setLoader(false);\r\n            if(response.success) {\r\n                history.push(\"/\");\r\n            }\r\n        } catch (e) {\r\n            setLoader(false);\r\n        }\r\n\r\n    }\r\n    // editorState.getCurrentContent().get\r\n    return (\r\n        <>\r\n            {loader && <Loading />}\r\n            <div className={root}>\r\n                <div className={contentContainer}>\r\n                    <Typography variant=\"h2\">\r\n                        Privacy policy\r\n                    </Typography>\r\n                    <EditorWrapper>\r\n                        <Toolbar editorState={editorState} setEditorState={updateState} />\r\n                        <EditorContainer>\r\n                            <Editor\r\n                                placeholder=\"write policy\"\r\n                                editorState={editorState}\r\n                                onChange={updateState}\r\n                                customStyleMap={styledMap}\r\n                                // onChange={setEditorState}\r\n                            />\r\n                        </EditorContainer>\r\n                    </EditorWrapper>\r\n                </div>\r\n                <div className={submitContainer}>\r\n                    <Button className={cancelBtn} onClick={() => {history.push(\"/\")}}  type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={postPolicy}  type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Policy;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Home\\index.tsx",["246","247","248","249","250"],"import React, {FC, useEffect, useState, ChangeEvent} from \"react\";\r\nimport {Button, Container, Grid, makeStyles, Paper, Tab, Tabs, Typography, useTheme} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport SwipeableViews  from \"react-swipeable-views\";\r\n\r\nimport {AppState, AppThunkDispatch} from \"../../store/types\";\r\nimport {NewGoalType} from \"components/Goals/Container\";\r\nimport {getAllGoals} from \"store\";\r\nimport TabPanel  from \"components/TabPanel\";\r\nimport noItemFound from \"assets/no _item.jpg\"\r\n\r\nimport {SortEndHandler} from \"react-sortable-hoc\";\r\nimport arrayMove from \"array-move\";\r\nimport {GoalsContainer, UnpublishedGoalContainer} from \"components/Goals\";\r\nimport {createSelector, Selector} from \"reselect\";\r\nimport {ICategorizedGoals, IGoalTemplate, SortItemBody} from \"api/types\";\r\nimport useStyles from \"./styles\";\r\nimport {useHistory} from \"react-router\";\r\nimport {sortGoals} from \"../../api/GoalsApi\";\r\nimport {Archive, Unarchive} from \"@material-ui/icons\";\r\nimport {setCurrentGoal, setGoalForm} from \"../../store/actions/goalActions\";\r\n\r\nexport interface IBriefGoal {\r\n    short: NewGoalType[],\r\n    medium: NewGoalType[],\r\n    long: NewGoalType[]\r\n}\r\n\r\nconst goalsSelector: Selector<AppState, ICategorizedGoals>  = (state: AppState ) => state.goals;\r\n\r\nconst getBriefGoals = (goals: IGoalTemplate[], publishStatus = true): NewGoalType[] => {\r\n    // console.log(goals);\r\n    return (\r\n    goals.length > 0 ? goals.filter(({IsPublished}) => IsPublished === publishStatus).map(({SortId, Images, Category, GoalId, Horizon, IsPublished}) => {\r\n        return {SortId, Image: (Images && Images.length > 0) ? Images[0].URL : '', Category, GoalId, Horizon, IsPublished};\r\n    }) : []\r\n)};\r\n\r\n\r\nconst briefGoal = createSelector<AppState, ICategorizedGoals,   IBriefGoal>(\r\n    goalsSelector,\r\n    goals => {\r\n        return {\r\n            short: getBriefGoals(goals.short),\r\n            medium: getBriefGoals(goals.medium),\r\n            long: getBriefGoals(goals.long)\r\n        }\r\n    }\r\n);\r\nconst briefGoalUnPublished = createSelector<AppState, ICategorizedGoals,   IBriefGoal>(\r\n    goalsSelector,\r\n    goals => {\r\n        return {\r\n            short: getBriefGoals(goals.short, false),\r\n            medium: getBriefGoals(goals.medium, false),\r\n            long: getBriefGoals(goals.long, false)\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\nconst useFetch = (fetchActionCreator: Function) => {\r\n    const dispatch = useDispatch<AppThunkDispatch>();\r\n    useEffect(() => {\r\n        dispatch(fetchActionCreator());\r\n    }, [])\r\n}\r\n\r\nconst tabProps = (index: number) => ({id: `full-width-tab-${index}`, 'aria-controls': `full-width-tabpanel-${index}`});\r\n\r\nconst Home: FC = () => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const allGoals = useSelector<AppState, AppState['goals']>(({goals}) => goals);\r\n    const briefGoals = useSelector<AppState, IBriefGoal>(briefGoal);\r\n    const unpublishedGoals = useSelector<AppState, IBriefGoal>(briefGoalUnPublished)\r\n    const [shortGoals, setShortGoals] = useState<NewGoalType[]>([]);\r\n    const [shortGoalsUnPublished, setShortGoalsUnPublished] = useState<NewGoalType[]>([]);\r\n    const [mediumGoals, setMediumGoals] = useState<NewGoalType[]>([]);\r\n    const [mediumGoalsUnPublished, setMediumGoalsUnPublished] = useState<NewGoalType[]>([]);\r\n    const [tabValue, setTabValue] = useState<number>(0);\r\n    const [longGoals, setLongGoals] = useState<NewGoalType[]>([]);\r\n    const [longGoalsUnPublished, setLongGoalsUnPublished] = useState<NewGoalType[]>([]);\r\n    useEffect(() => {\r\n        setShortGoalsUnPublished(unpublishedGoals.short);\r\n        setShortGoals(briefGoals.short);\r\n        setMediumGoals(briefGoals.medium);\r\n        setMediumGoalsUnPublished(unpublishedGoals.medium);\r\n        setLongGoals(briefGoals.long);\r\n        setLongGoalsUnPublished(unpublishedGoals.long);\r\n    }, [briefGoals]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (shortGoals.length > 0) {\r\n                await postSortedGoals(shortGoals);\r\n            }\r\n\r\n        }) ()\r\n    }, [shortGoals]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (mediumGoals.length > 0) {\r\n                await postSortedGoals(mediumGoals);\r\n            }\r\n\r\n        }) ()\r\n    }, [mediumGoals]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (longGoals.length > 1) {\r\n                await postSortedGoals(longGoals);\r\n            }\r\n\r\n        }) ()\r\n    }, [longGoals]);\r\n    useFetch(getAllGoals);\r\n\r\n    const postSortedGoals = (goals: NewGoalType[]) =>  {\r\n        const Data = goals.map<SortItemBody>(({GoalId}, index) => ({GoalId, SortId: index + 1}));\r\n        console.log(Data);\r\n        sortGoals({Data});\r\n    }\r\n\r\n    const onSortEndShort: SortEndHandler = ({oldIndex, newIndex}) => {\r\n        setShortGoals(oldItems => arrayMove(oldItems, oldIndex, newIndex));\r\n    }\r\n    const onSortEndMedium: SortEndHandler = ({oldIndex, newIndex}) => {\r\n        setMediumGoals(oldItems => arrayMove(oldItems, oldIndex, newIndex));\r\n    }\r\n    const onSortEndLong: SortEndHandler = ({oldIndex, newIndex}) => {\r\n        setLongGoals(oldItems => arrayMove(oldItems, oldIndex, newIndex));\r\n    }\r\n    const addNewGoal = () => {\r\n        localStorage.removeItem('files');\r\n        localStorage.removeItem('verticalVideo');\r\n        localStorage.removeItem('horizontalVideo');\r\n        dispatch(setCurrentGoal(null));\r\n        dispatch(setGoalForm(null));\r\n        history.push(\"/goalsAdd\");\r\n    }\r\n\r\n    const handleChange = (event: ChangeEvent<{}>, value: number) => {\r\n        setTabValue(value);\r\n    }\r\n    const handleChangeIndex = (index: number) => {\r\n        setTabValue(index);\r\n    }\r\n    const noItemSelector = (items: any[]) => items.length === 0 ?\r\n        <div className={classes.noItemContainer}><img src={noItemFound} alt=\"no record found\"/></div> : ''\r\n\r\n    return (\r\n        <Container className={classes.containerRoot}>\r\n            <Button  onClick={addNewGoal} style={{marginBottom: 20}}  variant=\"contained\" size=\"medium\" color=\"primary\">\r\n                Add new preset goal\r\n            </Button>\r\n            <Paper square\r\n\r\n            >\r\n                <Tabs value={tabValue}\r\n                      onChange={handleChange}\r\n                      variant=\"fullWidth\"\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                >\r\n                    <Tab  icon={<Unarchive />} label=\"Published\" {...tabProps(0)} />\r\n                    <Tab icon={<Archive />} label=\"Unpublished\" {...tabProps(1)} />\r\n                </Tabs>\r\n            </Paper>\r\n            <SwipeableViews axis='x' index={tabValue} onChangeIndex={handleChangeIndex} >\r\n                <TabPanel value={tabValue} index={0} dir={theme.direction}>\r\n                    <>\r\n                        <div className={classes.goalsContainer}>\r\n                            <Typography variant=\"h3\">Short term</Typography>\r\n                            {noItemSelector(shortGoals)}\r\n                            <GoalsContainer distance={1} items={shortGoals}  onSortEnd={onSortEndShort} axis={\"xy\"} helperClass={classes.helperSortable}/>\r\n                        </div>\r\n                        <div className={classes.goalsContainer}>\r\n                            <Typography variant=\"h3\">Medium term</Typography>\r\n                            {noItemSelector(mediumGoals)}\r\n                            <GoalsContainer distance={1} items={mediumGoals}  onSortEnd={onSortEndMedium} axis={\"xy\"} helperClass={classes.helperSortable}/>\r\n                        </div>\r\n                        <div className={classes.goalsContainer}>\r\n                            <Typography variant=\"h3\">Long term</Typography>\r\n                            {noItemSelector(longGoals)}\r\n                            <GoalsContainer distance={1} items={longGoals}  onSortEnd={onSortEndLong} axis={\"xy\"} helperClass={classes.helperSortable}/>\r\n                        </div>\r\n                    </>\r\n                </TabPanel>\r\n                <TabPanel value={tabValue} index={1} dir={theme.direction}>\r\n                    <div className={classes.goalsContainer}>\r\n                        <Typography variant=\"h3\">Short term </Typography>\r\n                        {noItemSelector(shortGoalsUnPublished)}\r\n                        <UnpublishedGoalContainer items={shortGoalsUnPublished} />\r\n                    </div>\r\n                    <div className={classes.goalsContainer}>\r\n                        <Typography variant=\"h3\">Medium term</Typography>\r\n                        {noItemSelector(mediumGoalsUnPublished)}\r\n                        <UnpublishedGoalContainer items={mediumGoalsUnPublished} />\r\n                    </div>\r\n                    <div className={classes.goalsContainer}>\r\n                        <Typography variant=\"h3\">Long term</Typography>\r\n                        {noItemSelector(longGoalsUnPublished)}\r\n                        <UnpublishedGoalContainer items={longGoalsUnPublished} />\r\n                    </div>\r\n\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalAdd\\index.tsx",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265"],"import React, {ChangeEvent, FC, useEffect, useRef, useState, KeyboardEvent} from \"react\";\r\nimport {VideoCard} from \"material-ui-player\";\r\n// @ts-ignore\r\nimport VideoThumbnail from 'react-video-thumbnail';\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Modal,\r\n    MenuItem,\r\n    Fade,\r\n    TextField,\r\n    Typography,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    CircularProgress, Backdrop\r\n} from \"@material-ui/core\";\r\nimport useStyles, {selectProps, ErrorLabel} from \"./styles\"\r\nimport BackNavigate from \"components/BackNavigate\";\r\nimport logo from \"assets/logo.svg\"\r\nimport {ArrowUpward, Done, FiberManualRecord, PlayArrow} from \"@material-ui/icons\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\n\r\nimport {Controller, FieldError, FieldErrors, SubmitErrorHandler, useForm} from \"react-hook-form\";\r\nimport {IGoalForm, IGoalFormWithImage, ImageActions, schema} from \"./form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport useFileUpload from \"hooks/FileUpload\";\r\nimport {useHistory} from \"react-router\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setGoalForm} from \"store/actions/goalActions\";\r\n\r\nimport {AppDispatch, AppState, CurrentGoal} from \"store/types\";\r\nimport useS3FileUpload, {FileError} from \"hooks/s3Upload\";\r\n\r\n\r\nconst GoalsAdd: FC = () => {\r\n    const { main, navigationHeader, formContainer, thingsContainer,\r\n        modal, modalPaper,\r\n    uploadContainer, uploadCaption, color, autoCompleteInput, iconSelected, uploadPlaceholder, errorText,\r\n        fieldContainer, submitContainer} = useStyles();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const [openModal, setOpenModal] = useState<boolean>(false);\r\n    const [hasVerticalVideo, setHasVerticalVideo] = useState<boolean>(false);\r\n    const [verticalSrc, setVerticalSrc] = useState<string>('');\r\n    const [horizontalSrc, setHorizontalSrc] = useState<string>('');\r\n    const [hasHorizontalVideo, setHasHorizontalVideo] = useState<boolean>(false);\r\n    const [categoryColor, setCategoryColor] = useState<{color: string, label: string}>({color: '#0d2e6e', label: 'Blue'})\r\n    const imageRef = useRef<null | HTMLElement>(null);\r\n    const [fileError, setFileError] = useState<FileError>({toggle: false, message: ''});\r\n    const [uploadFile, setUploadFile] = useState<string>('');\r\n    const currentGoal = useSelector<AppState, CurrentGoal>(state => state.currentGoal);\r\n    const goalFormData = useSelector<AppState, IGoalFormWithImage>(state => state.updatedGoal);\r\n    const allGoals = useSelector<AppState, string[]>(state => state.goalCategories);\r\n    const {handleUpload, files, clearFiles, uploadError, fileLoader} = useS3FileUpload();\r\n    const [playVideoSrc, setPlayVideoSrc] = useState<string>('');\r\n    const {clearFiles: clearVerticalVideo, files: verticalVideoFiles, handleUpload: handleVerticalUpload, uploadError: verticalError, fileLoader: verticalLoader} = useS3FileUpload('verticalVideo', \"video\");\r\n    const {clearFiles: clearHorizontalVideo, files: horizontalVideoFiles, handleUpload: handleHorizontalUpload, uploadError: horizontalError, fileLoader: horizontalLoader} = useS3FileUpload('horizontalVideo', \"video\");\r\n    const history = useHistory();\r\n    const {register, setValue, trigger, handleSubmit, setError, getValues, control, errors} = useForm<IGoalForm>({\r\n        criteriaMode: 'all',\r\n        mode: 'onChange',\r\n        resolver: yupResolver(schema),\r\n        defaultValues: {\r\n            name: '',\r\n            category: '',\r\n            horizon: '',\r\n            amount: '',\r\n            targetExplanation: '',\r\n            tobeAchieved: '',\r\n            achievedExplanation: '',\r\n            importance: '',\r\n            importanceExplanation: '',\r\n            description: '',\r\n            thingToConsider1: '',\r\n            thingToConsider2: '',\r\n            thingToConsider3: '',\r\n            isPublished: false,\r\n            hasBorrowed: false,\r\n            MinRepaymentPeriod: 12,\r\n            MaxRepaymentPeriod: 60,\r\n            CategoryColor: categoryColor,\r\n        }\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        setFileError(uploadError)\r\n    }, [uploadError]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (files && files.length > 0) {\r\n            setFileError({toggle: false, message: ''});\r\n        }\r\n    }, [files]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(goalFormData) {\r\n            const { achievedExplanation, amount, category, description, horizon,\r\n            importance, importanceExplanation, name, targetExplanation, thingToConsider1,\r\n            thingToConsider2, thingToConsider3, CategoryColor,\r\n            tobeAchieved, hasBorrowed, MinRepaymentPeriod, MaxRepaymentPeriod, isPublished,\r\n            ageGroup20, ageGroup30, ageGroup40, ageGroup50, ageGroup60} = goalFormData;\r\n            setValue('name',   name);\r\n            setValue('CategoryColor', CategoryColor);\r\n            setValue('category',  category);\r\n            setTimeout(() =>   setValue('horizon',  horizon))\r\n            setValue('amount',  amount);\r\n            setValue('targetExplanation',    targetExplanation);\r\n            setValue('MinRepaymentPeriod',    MinRepaymentPeriod === 0 ?  12 : MinRepaymentPeriod);\r\n            setValue('MaxRepaymentPeriod',    MaxRepaymentPeriod === 0 ? 60 : MaxRepaymentPeriod);\r\n            setValue('tobeAchieved',  tobeAchieved);\r\n            setValue('achievedExplanation',  achievedExplanation);\r\n            setTimeout(() =>   setValue('importance',  importance))\r\n            setValue('importanceExplanation', importanceExplanation);\r\n            setValue('description', description);\r\n            setTimeout(() =>   setValue('isPublished',  isPublished))\r\n            if (currentGoal && (files.length === 0 || !files) &&  currentGoal.Images.length > 0) {\r\n                setUploadFile(currentGoal.Images[0].URL);\r\n            }\r\n            setValue('thingToConsider1', thingToConsider1);\r\n            setValue('thingToConsider2', thingToConsider2);\r\n            setValue('thingToConsider3', thingToConsider3);\r\n            setValue('ageGroup20', ageGroup20);\r\n            setValue('ageGroup30', ageGroup30);\r\n            setValue('ageGroup40', ageGroup40);\r\n            setValue('ageGroup50', ageGroup50);\r\n            setValue('ageGroup60', ageGroup60);\r\n            setTimeout(() =>   setValue('hasBorrowed',  (MaxRepaymentPeriod > 0)))\r\n\r\n        } else if (currentGoal) {\r\n            const {Name, Category, Horizon, Images,\r\n            Importance, Description, CategoryColor, SumToReach, ToBeAchived, ThingsToConsider, IsPublished, MaxRepaymentPeriod, MinRepaymentPeriod, AgeGroup } = currentGoal;\r\n\r\n            setValue('name',   Name);\r\n            if (CategoryColor === 'White') {\r\n                setValue('CategoryColor',  {color: '#FFFFFF', label: 'White'})\r\n            } else {\r\n                setValue('CategoryColor',  {color: '#0d2e6e', label: 'Blue'})\r\n            }\r\n            setValue('category',  Category);\r\n            setTimeout(() =>   setValue('horizon',  Horizon));\r\n            setTimeout(() =>   {\r\n                setValue('isPublished',  IsPublished)\r\n                console.log(getValues('isPublished'))\r\n            });\r\n            if (AgeGroup && AgeGroup.includes(\"20\")) {\r\n                setValue('ageGroup20',  true)\r\n            }\r\n            if (AgeGroup && AgeGroup.includes(\"30\")) {\r\n                setValue('ageGroup30',  true)\r\n            }\r\n            if (AgeGroup && AgeGroup.includes(\"40\")) {\r\n                setValue('ageGroup40',  true)\r\n            }\r\n            if (AgeGroup && AgeGroup.includes(\"50\")) {\r\n                setValue('ageGroup50',  true)\r\n            }\r\n            if (AgeGroup && AgeGroup.includes(\"60\")) {\r\n                setValue('ageGroup60',  true)\r\n            }\r\n\r\n\r\n            setValue('amount',  SumToReach.Title);\r\n            setValue('MinRepaymentPeriod',    MinRepaymentPeriod === 0 ?  12 : MinRepaymentPeriod);\r\n            setValue('MaxRepaymentPeriod',    MaxRepaymentPeriod === 0 ? 60 : MaxRepaymentPeriod);\r\n            setValue('targetExplanation',    SumToReach.Description);\r\n            setValue('tobeAchieved',  ToBeAchived.Title);\r\n            setValue('achievedExplanation',  ToBeAchived.Description);\r\n            const [_, importanceInput] = Importance.Title.split(\"-\");\r\n            if (importanceInput) {\r\n                setTimeout(() =>   setValue('importance',  importanceInput))\r\n            }\r\n            setValue('importanceExplanation', Importance.Description);\r\n            setValue('description', Description);\r\n            if (Images && Images.length > 0) {\r\n                setUploadFile(Images[0].URL);\r\n                const verticalVideo = Images.find(({Dimension}) => Dimension === 'VideoVertical');\r\n                const horizontalVideo = Images.find(({Dimension}) => Dimension === 'VideoHorizontal');\r\n                if (verticalVideo) {\r\n                    setVerticalSrc(verticalVideo.URL);\r\n                    setHasVerticalVideo(true);\r\n                }\r\n                if (horizontalVideo) {\r\n                    setHorizontalSrc(horizontalVideo.URL);\r\n                    setHasHorizontalVideo(true);\r\n                }\r\n\r\n\r\n            }\r\n            setValue('thingToConsider1', ThingsToConsider[0] || \"\");\r\n            setValue('thingToConsider2', ThingsToConsider[1] || \"\");\r\n            setValue('thingToConsider3', ThingsToConsider[2] || \"\");\r\n            // setTimeout(() =>   {\r\n                setValue('hasBorrowed',  MaxRepaymentPeriod > 0)\r\n\r\n            // });\r\n        } else {\r\n            clearFiles();\r\n            clearHorizontalVideo();\r\n            clearVerticalVideo();\r\n        }\r\n    }, []);\r\n    const onFormError = (errors: FieldErrors<IGoalForm>) => {\r\n        console.log(errors);\r\n        if (!(files && files.length > 0)) {\r\n            setFileError({toggle: true, message: 'Image is required'});\r\n        }\r\n    }\r\n    const onFormSubmit = (formData: IGoalForm) => {\r\n        if (!uploadFile) {\r\n            if (!(files && files.length > 0)) {\r\n                setFileError({toggle: true, message: 'Image is required'});\r\n\r\n                imageRef && imageRef.current?.focus();\r\n                return;\r\n            }\r\n        }\r\n        console.log(formData);\r\n        let updatedGoal: IGoalFormWithImage = {Images: [], ...formData};\r\n        if (files && files.length > 0) {\r\n            updatedGoal.Images = [{\r\n                Dimension: \"Image\",\r\n                URL: files[0].url\r\n            }];\r\n        }\r\n        dispatch(setGoalForm(updatedGoal));\r\n        history.push(\"/goalTip\");\r\n\r\n    }\r\n    const onBack = () => {\r\n        history.push(\"/\");\r\n    }\r\n    const onControlChange = ([, data]: any[]) => {\r\n        console.log(data);\r\n        return data;\r\n    }\r\n    const getOpObj = (option: any) => {\r\n        // if (!option._id) option = categories.find(op => op._id === option);\r\n        return option;\r\n    };\r\n    const getOptionLabel = (option: any) => {\r\n        console.log(option);\r\n        return option || '';\r\n    }\r\n    const onCategoryChange = ({target: {value}}: ChangeEvent<HTMLInputElement>) => {\r\n        if(allGoals.includes(value)) {\r\n            setError('category', {\r\n                type: \"manual\",\r\n                message: \"Category already exist\"\r\n            })\r\n        }\r\n    }\r\n    const onLimitKeyDown = (e: KeyboardEvent<HTMLDivElement> , name: 'MinRepaymentPeriod' | 'MaxRepaymentPeriod') => {\r\n        // const val = parseInt(e.key, 10);\r\n        //\r\n        // const minLimit = Number(getValues(name));\r\n        // if(((e.keyCode === 8) || (e.keyCode === 46 && e.location === 0)) && minLimit <= 9) {\r\n        //     e.preventDefault();\r\n        //     setValue(name, 0);\r\n        //     return false;\r\n        // }\r\n        // if (minLimit === 0 && !isNaN(val)) {\r\n        //     e.preventDefault();\r\n        //     setValue(name, val);\r\n        //     return false;\r\n        // }\r\n        // if(!isNaN(val)) {\r\n        //     setValue(name, Number(minLimit.toString() + val))\r\n        // }\r\n\r\n        return true;\r\n    }\r\n    return (\r\n        <Container className={main}>\r\n            <div className={navigationHeader}>\r\n                <BackNavigate onClick={onBack} />\r\n                <img src={logo} alt=\"logo\" />\r\n            </div>\r\n            <form onSubmit={handleSubmit(onFormSubmit, onFormError)}>\r\n                <div className={formContainer} >\r\n                    <Typography variant=\"h3\">\r\n                        {currentGoal ? 'Edit': 'Add'} goal details\r\n                    </Typography>\r\n\r\n                    <div className={fieldContainer}>\r\n                        <TextField label=\"Goal category\"\r\n                                   onChange={onCategoryChange}\r\n                                   inputRef={register}\r\n                                   error={!!errors.category}\r\n                                   helperText={errors.category ? errors.category.message : ''}\r\n                                   name=\"category\"/>\r\n\r\n                        <Controller control={control} name=\"CategoryColor\"\r\n                                    render={({onChange, ...props}) => (\r\n                                        <Autocomplete\r\n                                            limitTags={1}\r\n                                            onChange={(e, data) => onChange(data)}\r\n\r\n                                            renderTags={(values) => (\r\n                                                values.map(option => (\r\n                                                    <>\r\n                                                        <span className={color} style={{ backgroundColor: option.color }} />\r\n                                                        <span>{option.label}</span>\r\n                                                    </>\r\n                                                ))\r\n                                            )}\r\n                                            options={[\r\n                                                {color: '#FFFFFF', label: 'White'},\r\n                                                {color: '#0d2e6e', label: 'Blue'}\r\n                                            ]}\r\n                                            disablePortal\r\n                                            renderOption={(option, {selected}) => (\r\n                                                <>\r\n                                                    <Done className={iconSelected}  style={{ visibility: selected ? 'visible' : 'hidden' }} />\r\n                                                    <span className={color} style={{ backgroundColor: option.color }} />\r\n                                                    <span>{option.label}</span>\r\n                                                </>\r\n                                            )}\r\n                                            getOptionLabel={(option) => option.label}\r\n                                            renderInput={({InputProps: {ref}, inputProps}) => (\r\n                                                <TextField className={autoCompleteInput} label=\"Category color\"  InputProps={{startAdornment: <span className={color} style={{ backgroundColor: getValues('CategoryColor')?.color, margin: '0 -8px 0 16px' }} />}}\r\n                                                           disabled ref={ref} inputProps={inputProps}  />\r\n                                            )}\r\n                                            {...props}  />\r\n                                    )} onChange={(data: any) => {console.log(data)}} />\r\n\r\n                        <Controller control={control} name=\"horizon\" as={\r\n                            <TextField select  label=\"Horizon\">\r\n                                {['Short', 'Medium', 'Long'].map((item, i) => (<MenuItem key={i} value={item}>{item}</MenuItem>))}\r\n                            </TextField>\r\n                        }\r\n                                    error={!!errors.horizon}\r\n                                    helperText={errors.horizon ? errors.horizon.message : ''}\r\n                                    SelectProps={selectProps}>\r\n                        </Controller>\r\n                        <TextField label=\"Name guide\"\r\n                                   inputRef={register}\r\n                                   error={!!errors.name}\r\n                                   helperText={errors.name ? errors.name.message : ''}\r\n                                   name=\"name\"/>\r\n\r\n                        <div className={uploadContainer} >\r\n                            <div className={uploadPlaceholder} >\r\n                                {fileLoader ? <CircularProgress /> :\r\n                                    (files && files.length > 0)  ?\r\n                                    <img alt=\"goal image\" src={files[0].url} /> :\r\n                                    uploadFile ? <img alt=\"goal image\" src={uploadFile} /> :\r\n                                    (\r\n                                    <>\r\n                                        <ArrowUpward style={{color: '#B0B3B9'}}  />\r\n                                        <Typography style={{ fontSize: '12px' }} variant=\"subtitle2\">\r\n                                            upload\r\n                                        </Typography>\r\n                                    </>\r\n                                )}\r\n\r\n                            </div>\r\n                            <div className={uploadCaption}>\r\n                                <Typography variant=\"body2\">\r\n                                    Upload goal image\r\n                                </Typography>\r\n                                <label htmlFor=\"imageUpload\">\r\n                                    <input onChange={handleUpload} style={{ visibility: \"hidden\", position: \"absolute\" }} type='file' id='imageUpload' />\r\n                                    <Button disabled={fileError.toggle} ref={imageRef} style={{ display: 'flex' }} variant=\"outlined\" size=\"small\" color=\"primary\" component=\"span\">\r\n                                        Upload\r\n                                    </Button>\r\n                                    {fileError.toggle  &&  <ErrorLabel >\r\n                                        {fileError.message}\r\n                                    </ ErrorLabel>}\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className={uploadContainer} >\r\n                            <div className={uploadPlaceholder} >\r\n                                {(verticalVideoFiles && verticalVideoFiles.length > 0)  ?\r\n                                    <PlayArrow style={{fontSize: '50px', cursor: 'pointer'}} onClick={() => {\r\n                                        setOpenModal(() => true);\r\n                                        setPlayVideoSrc(verticalVideoFiles[0].url);\r\n                                    }}  /> :\r\n                                    verticalLoader ? <CircularProgress /> :\r\n                                    hasVerticalVideo ? <PlayArrow style={{fontSize: '50px', cursor: 'pointer'}} onClick={() => {\r\n                                            setPlayVideoSrc(verticalSrc);\r\n                                        setOpenModal(() => true);\r\n\r\n                                        }}   />\r\n                                        :\r\n                                    (\r\n                                            <>\r\n                                                <ArrowUpward style={{color: '#B0B3B9'}}  />\r\n                                                <Typography style={{ fontSize: '12px' }} variant=\"subtitle2\">\r\n                                                    upload\r\n                                                </Typography>\r\n\r\n                                            </>\r\n                                        )}\r\n\r\n                            </div>\r\n                            <div className={uploadCaption}>\r\n                                <Typography variant=\"body2\">\r\n                                    Upload goal vertical video\r\n                                </Typography>\r\n                                <label htmlFor=\"verticalUpload\">\r\n                                    <input onChange={handleVerticalUpload} style={{ visibility: \"hidden\", position: \"absolute\" }} type='file' id='verticalUpload' />\r\n                                    <Button disabled={verticalError.toggle}  style={{ display: 'flex' }} variant=\"outlined\" size=\"small\" color=\"primary\" component=\"span\">\r\n                                        Upload\r\n                                    </Button>\r\n                                    {verticalError.toggle  &&  <ErrorLabel >\r\n                                        {verticalError.message}\r\n                                    </ ErrorLabel>}\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className={uploadContainer} >\r\n                            <div className={uploadPlaceholder} >\r\n                                {(horizontalVideoFiles && horizontalVideoFiles.length > 0)  ?\r\n                                    <PlayArrow style={{fontSize: '50px', cursor: 'pointer'}} onClick={() => {\r\n                                        setOpenModal(() => true);\r\n                                        setPlayVideoSrc(horizontalVideoFiles[0].url);\r\n                                    }}  /> :\r\n                                    horizontalLoader ? <CircularProgress /> :\r\n                                    hasHorizontalVideo ? <PlayArrow style={{fontSize: '50px', cursor: 'pointer'}} onClick={() => {\r\n                                            setOpenModal(() => true);\r\n                                            setPlayVideoSrc(horizontalSrc);\r\n                                        }}   /> :\r\n                                        (\r\n                                            <>\r\n                                                <ArrowUpward style={{color: '#B0B3B9'}}  />\r\n                                                <Typography style={{ fontSize: '12px' }} variant=\"subtitle2\">\r\n                                                    upload {horizontalError.toggle }\r\n                                                </Typography>\r\n\r\n                                            </>\r\n                                        )}\r\n\r\n                            </div>\r\n                            <div className={uploadCaption}>\r\n                                <Typography variant=\"body2\">\r\n                                    Upload goal horizontal video\r\n                                </Typography>\r\n                                <label htmlFor=\"horizontalUpload\">\r\n                                    <input onChange={handleHorizontalUpload} style={{ visibility: \"hidden\", position: \"absolute\" }} type='file' id='horizontalUpload' />\r\n                                    <Button disabled={horizontalError.toggle}  style={{ display: 'flex' }} variant=\"outlined\" size=\"small\" color=\"primary\" component=\"span\">\r\n                                        Upload\r\n                                    </Button>\r\n                                    {horizontalError.toggle  &&  <ErrorLabel >\r\n                                        {horizontalError.message}\r\n                                    </ ErrorLabel>}\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <Typography  variant=\"h3\" >\r\n                            Target amount guide\r\n                        </Typography>\r\n                        <TextField label=\"Target amount guide\"\r\n                                   inputRef={register}\r\n                                   error={!!errors.amount}\r\n                                   helperText={errors.amount ? errors.amount.message : ''}\r\n                                   name=\"amount\"\r\n                        />\r\n                        <TextField rows={5} rowsMax={5} multiline\r\n                                   error={!!errors.targetExplanation}\r\n                                   helperText={errors.targetExplanation ? errors.targetExplanation.message : ''}\r\n                                   label=\"Explanation\" inputRef={register} name=\"targetExplanation\" />\r\n\r\n                        <Typography  variant=\"h3\" >\r\n                            Repayment period\r\n                        </Typography>\r\n                        <TextField label=\"Minimum repayment period\"\r\n                                   type='number'\r\n                                   inputRef={register}\r\n                                   error={!!errors.MinRepaymentPeriod}\r\n                                   disabled={!getValues('hasBorrowed')}\r\n                                   helperText={errors.MinRepaymentPeriod ? errors.MinRepaymentPeriod.message : ''}\r\n                                   name=\"MinRepaymentPeriod\"\r\n                                   onChange={(e) => {\r\n                                       trigger('MinRepaymentPeriod').then(() => {});\r\n                                   }}\r\n                                   onKeyDown={(e) => {onLimitKeyDown(e, 'MinRepaymentPeriod')}}\r\n                        />\r\n                        <TextField\r\n                            disabled={!getValues('hasBorrowed')}\r\n                            type='number'\r\n                                    onChange={(e) => {\r\n                                        trigger('MaxRepaymentPeriod').then(() => {});\r\n                                    }}\r\n                                    onKeyDown={(e) => {onLimitKeyDown(e, 'MaxRepaymentPeriod')}}\r\n                                   error={!!errors.MaxRepaymentPeriod}\r\n                                   helperText={errors.MaxRepaymentPeriod ? errors.MaxRepaymentPeriod.message : ''}\r\n                                   label=\"Maximum borrowed amount\" inputRef={register} name=\"MaxRepaymentPeriod\" />\r\n\r\n                        <FormControlLabel\r\n                            // checked={getValues('isPublished')}\r\n                            control={<Controller onChange={() => {\r\n                                debugger;\r\n                                console.log(getValues('hasBorrowed'));\r\n\r\n                            }}  name=\"hasBorrowed\" control={control} value={true}  defaultValue={false}\r\n                                                 render={(\r\n                                                     props,\r\n                                                     { invalid, isTouched, isDirty }\r\n                                                 ) => (\r\n                                                     <Checkbox\r\n                                                         onBlur={props.onBlur}\r\n                                                         onChange={(e) => {\r\n                                                             props.onChange(e.target.checked);\r\n                                                             trigger('MinRepaymentPeriod').then(() => {});\r\n                                                             trigger('MaxRepaymentPeriod').then(() => {});\r\n                                                         }}\r\n                                                         checked={props.value}\r\n                                                         inputRef={props.ref}\r\n                                                     />\r\n                                                 )} />  }\r\n                            label={\"Enable borrowing\"} />\r\n\r\n                        <Typography  variant=\"h3\" >\r\n                             To be achieved by guide\r\n                        </Typography>\r\n                        <Controller control={control} name=\"tobeAchieved\" as={\r\n                            <TextField select  label=\"To be achieved by guide\">\r\n                                {Array.from({length: 20}).map((item, i) => (<MenuItem key={i} value={`In ${i + 1} Year`}>{`In ${i + 1} Year`}</MenuItem>))}\r\n                            </TextField>\r\n                        }\r\n                                    error={!!errors.importance}\r\n                                    helperText={errors.importance ? errors.importance.message : ''}\r\n                                    SelectProps={selectProps}>\r\n                        </Controller>\r\n                        <TextField rows={5} rowsMax={5}\r\n                                   error={!!errors.achievedExplanation}\r\n                                   helperText={errors.achievedExplanation ? errors.achievedExplanation.message : ''}\r\n                                   multiline label=\"Explanation\" inputRef={register} name=\"achievedExplanation\" />\r\n                        <Typography  variant=\"h3\" >\r\n                            Importance guide\r\n                        </Typography>\r\n                        <Controller control={control} name=\"importance\" as={\r\n                            <TextField select  label=\"Importance guide\">\r\n                                {['None','Very high','High', 'Medium', 'Low', 'Very low'].map((item, i) => (<MenuItem key={i} value={item}>{item}</MenuItem>))}\r\n                            </TextField>\r\n                        }\r\n                                    error={!!errors.importance}\r\n                                    helperText={errors.importance ? errors.importance.message : ''}\r\n                                    SelectProps={selectProps}>\r\n                        </Controller>\r\n                        <TextField rows={5} rowsMax={5}\r\n                                   error={!!errors.importanceExplanation}\r\n                                   helperText={errors.importanceExplanation ? errors.importanceExplanation.message : ''}\r\n                                   multiline label=\"Explanation\" inputRef={register} name=\"importanceExplanation\" />\r\n                        <Typography  variant=\"h3\" >\r\n                           Goal description\r\n                        </Typography>\r\n                        <TextField rows={5} rowsMax={5} multiline\r\n                                   error={!!errors.description}\r\n                                   helperText={errors.description ? errors.description.message : ''}\r\n                                   label=\"Consideration\" inputRef={register} name=\"description\" />\r\n                        <Typography  variant=\"h3\" >\r\n                            Things to consider\r\n                        </Typography>\r\n                        <div className={thingsContainer}>\r\n                            <FiberManualRecord />\r\n                            <TextField  label=\"Consideration\" inputRef={register} name=\"thingToConsider1\"\r\n                                        error={!!errors.thingToConsider1}\r\n                                        helperText={errors.thingToConsider1 ? errors.thingToConsider1.message : ''} />\r\n                        </div>\r\n                        <div className={thingsContainer}>\r\n                            <FiberManualRecord />\r\n                            <TextField  label=\"Consideration\" inputRef={register} name=\"thingToConsider2\"\r\n                                        error={!!errors.thingToConsider2}\r\n                                        helperText={errors.thingToConsider2 ? errors.thingToConsider2.message : ''}/>\r\n                        </div>\r\n                        <div className={thingsContainer}>\r\n                            <FiberManualRecord />\r\n                            <TextField  label=\"Consideration\" inputRef={register} name=\"thingToConsider3\"\r\n                                        error={!!errors.thingToConsider3}\r\n                                        helperText={errors.thingToConsider3 ? errors.thingToConsider3.message : ''}\r\n                            />\r\n                        </div>\r\n                        <Typography  variant=\"h3\" >\r\n                            Age groups\r\n                        </Typography>\r\n                        <FormControlLabel\r\n                            // checked={getValues('isPublished')}\r\n                            control={<Controller onChange={() => {console.log(getValues('ageGroup20'))}}  name=\"ageGroup20\" control={control} value={true}  defaultValue={false}\r\n                                                 render={(\r\n                                                     { onChange, onBlur, value, name, ref },\r\n                                                     { invalid, isTouched, isDirty }\r\n                                                 ) => (\r\n                                                     <Checkbox\r\n                                                         onBlur={onBlur}\r\n                                                         onChange={(e) => onChange(e.target.checked)}\r\n                                                         checked={value}\r\n                                                         inputRef={ref}\r\n                                                     />\r\n                                                 )} />  }\r\n                            label={\"20\"} />\r\n                        <FormControlLabel\r\n                            // checked={getValues('isPublished')}\r\n                            control={<Controller onChange={() => {console.log(getValues('ageGroup30'))}}  name=\"ageGroup30\" control={control} value={true}  defaultValue={false}\r\n                                                 render={(\r\n                                                     { onChange, onBlur, value, name, ref },\r\n                                                     { invalid, isTouched, isDirty }\r\n                                                 ) => (\r\n                                                     <Checkbox\r\n                                                         onBlur={onBlur}\r\n                                                         onChange={(e) => onChange(e.target.checked)}\r\n                                                         checked={value}\r\n                                                         inputRef={ref}\r\n                                                     />\r\n                                                 )} />  }\r\n                            label={\"30\"} />\r\n                        <FormControlLabel\r\n                            // checked={getValues('isPublished')}\r\n                            control={<Controller onChange={() => {console.log(getValues('ageGroup40'))}}  name=\"ageGroup40\" control={control} value={true}  defaultValue={false}\r\n                                                 render={(\r\n                                                     { onChange, onBlur, value, name, ref },\r\n                                                     { invalid, isTouched, isDirty }\r\n                                                 ) => (\r\n                                                     <Checkbox\r\n                                                         onBlur={onBlur}\r\n                                                         onChange={(e) => onChange(e.target.checked)}\r\n                                                         checked={value}\r\n                                                         inputRef={ref}\r\n                                                     />\r\n                                                 )} />  }\r\n                            label={\"40\"} />\r\n                        <FormControlLabel\r\n                            // checked={getValues('isPublished')}\r\n                            control={<Controller onChange={() => {console.log(getValues('ageGroup50'))}}  name=\"ageGroup50\" control={control} value={true}  defaultValue={false}\r\n                                                 render={(\r\n                                                     { onChange, onBlur, value, name, ref },\r\n                                                     { invalid, isTouched, isDirty }\r\n                                                 ) => (\r\n                                                     <Checkbox\r\n                                                         onBlur={onBlur}\r\n                                                         onChange={(e) => onChange(e.target.checked)}\r\n                                                         checked={value}\r\n                                                         inputRef={ref}\r\n                                                     />\r\n                                                 )} />  }\r\n                            label={\"50\"} />\r\n                        <FormControlLabel\r\n                            // checked={getValues('isPublished')}\r\n                            control={<Controller onChange={() => {console.log(getValues('ageGroup60'))}}  name=\"ageGroup60\" control={control} value={true}  defaultValue={false}\r\n                                                 render={(\r\n                                                     { onChange, onBlur, value, name, ref },\r\n                                                     { invalid, isTouched, isDirty }\r\n                                                 ) => (\r\n                                                     <Checkbox\r\n                                                         onBlur={onBlur}\r\n                                                         onChange={(e) => onChange(e.target.checked)}\r\n                                                         checked={value}\r\n                                                         inputRef={ref}\r\n                                                     />\r\n                                                 )} />  }\r\n                            label={\"60+\"} />\r\n\r\n                        {getValues('isPublished')}\r\n                        <FormControlLabel\r\n                            // checked={getValues('isPublished')}\r\n                            control={<Controller onChange={() => {console.log(getValues('isPublished'))}}  name=\"isPublished\" control={control} value={true}  defaultValue={false}\r\n                                                 render={(\r\n                                                     { onChange, onBlur, value, name, ref },\r\n                                                     { invalid, isTouched, isDirty }\r\n                                                 ) => (\r\n                                                     <Checkbox\r\n                                                         onBlur={onBlur}\r\n                                                         onChange={(e) => onChange(e.target.checked)}\r\n                                                         checked={value}\r\n                                                         inputRef={ref}\r\n                                                     />\r\n                                                 )} />  }\r\n                               label={\"Publish current goal\"} />\r\n\r\n                    </div>\r\n                </div>\r\n                <div className={submitContainer}>\r\n                    <Button disabled={fileLoader || verticalLoader || horizontalLoader} type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">\r\n                        Next step\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={modal}\r\n                open={openModal}\r\n                closeAfterTransition\r\n                onClose={() => setOpenModal(false)}\r\n                disablePortal={false}\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={openModal}>\r\n                    <div className={modalPaper}>\r\n                         <VideoCard  autoplay={true}  src={playVideoSrc}/>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default GoalsAdd;\r\n\r\n","D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalTips\\index.tsx",["266","267","268","269","270"],"import React, {FC, useEffect, useState} from \"react\";\r\nimport useStyles from \"./styles\"\r\nimport {Button, Container, Typography} from \"@material-ui/core\";\r\nimport {SortableTipContainer, TipCardData} from \"components/TipCard\";\r\nimport {SortEndHandler} from \"react-sortable-hoc\";\r\nimport arrayMove from \"array-move\";\r\nimport {v4 as getId} from \"uuid\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, AppState, CurrentGoal} from \"../../store/types\";\r\nimport BackNavigate from \"../../components/BackNavigate\";\r\nimport logo from \"../../assets/logo.svg\";\r\nimport {useHistory} from \"react-router\";\r\nimport {AgeTypes, GoalPost, ImageInput, ITileDescription, NewGoalPost, NewSortIndexes} from \"../../api/types\";\r\nimport {IGoalFormWithImage, ImageActions} from \"../GoalAdd/form\";\r\nimport {postNewGoal, putGoal} from \"api/GoalsApi\";\r\nimport Loading from \"../../components/Loading\";\r\nimport {setCurrentGoal, setGoalForm} from \"../../store/actions/goalActions\";\r\nimport useFileUpload from \"../../hooks/FileUpload\";\r\nimport useS3FileUpload from \"../../hooks/s3Upload\";\r\n\r\nexport type TipData = TipCardData & {editable? :boolean, id?: string};\r\n\r\nconst GoalTips: FC = () => {\r\n    const currentGoal = useSelector<AppState, CurrentGoal>(state => state.currentGoal);\r\n    const goalFormData = useSelector<AppState, IGoalFormWithImage>(state => state.updatedGoal);\r\n    const newSortIndices = useSelector<AppState, NewSortIndexes>(state => state.newSortIndexes);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const {files, clearFiles} = useS3FileUpload();\r\n    const {files: verticalVideos, clearFiles: clearVerticalVideos} = useS3FileUpload('verticalVideo', 'video');\r\n    const {files: horizontalVideos, clearFiles: clearHorizontalVideos} = useS3FileUpload('horizontalVideo', 'video');\r\n\r\n    const {root, tipContainerHeader, navigationHeader, submitContainer } = useStyles();\r\n    const [tipsData, setTipsData] = useState<TipData[]>([]);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    useEffect(() => {\r\n        if (currentGoal) {\r\n            const checkLists = currentGoal.ChecklistItems.map<TipData>(({Title: title, Description: explanation}) => ({id: getId(), title, explanation}));\r\n            setTipsData(checkLists);\r\n        }\r\n    }, []);\r\n    const [addTipToggle, setAddTipToggle] = useState<boolean>(false);\r\n    const onCardEdit = (i: number, editable: boolean) => {\r\n        const newTips = tipsData.map((item, index) => (\r\n            index !== i ? item : {...item, editable}\r\n        ));\r\n        setTipsData(newTips);\r\n    }\r\n    const onTipSave = (i: number, tipData: TipCardData, id: string) => {\r\n        if (id === 'newTip') {\r\n            id = getId();\r\n            setAddTipToggle(false);\r\n        }\r\n        const newTips = tipsData.map((item, index) => (\r\n            index !== i ? item : {id, ...tipData}\r\n        ));\r\n        setTipsData(newTips);\r\n    };\r\n    const onTipRemove = (i: number) => {\r\n        const newTips = tipsData.filter((item, index) => i !== index );\r\n        setTipsData(newTips);\r\n    }\r\n    const onCancel = (i: number, id: string) => {\r\n        if(id === \"newTip\") {\r\n           setAddTipToggle(false);\r\n           onTipRemove(i);\r\n        } else {\r\n            onCardEdit(i, false)\r\n        }\r\n    }\r\n    const onNewTipCancel = () => {\r\n        setAddTipToggle(false);\r\n    }\r\n    const onNewTipSave = (tipData: TipCardData) => {\r\n        const newTips = [tipData, ...tipsData];\r\n        setTipsData(newTips);\r\n        setAddTipToggle(false);\r\n    }\r\n    const onSortEndTips: SortEndHandler = ({oldIndex, newIndex}) => {\r\n        setTipsData(oldItems => arrayMove(oldItems, oldIndex, newIndex));\r\n    }\r\n    const onNewTip = () => {\r\n        setAddTipToggle(true);\r\n        const newTip: TipData = {\r\n            explanation: '',\r\n            editable: true,\r\n            title: '',\r\n            id: 'newTip'\r\n        }\r\n        setTipsData([newTip, ...tipsData]);\r\n    }\r\n    const onBack = () => {\r\n        history.push(\"/goalsAdd\");\r\n    }\r\n    const submitGoal = async () => {\r\n        if (goalFormData && currentGoal) {\r\n            let {GoalId, SortId, Images: currentImages} = currentGoal;\r\n            const {category: Category,  description: Description,\r\n            horizon: Horizon, hasBorrowed, MinRepaymentPeriod, MaxRepaymentPeriod, importance, importanceExplanation,\r\n            name: Name, amount, targetExplanation, thingToConsider1,\r\n            thingToConsider2, thingToConsider3, CategoryColor, tobeAchieved, achievedExplanation, isPublished,\r\n            ageGroup20, ageGroup30, ageGroup40, ageGroup50, ageGroup60} = goalFormData;\r\n\r\n            if (Horizon !== currentGoal.Horizon || (!currentGoal.IsPublished && isPublished)) {\r\n                if (Horizon === 'Short') {\r\n                    SortId = newSortIndices.short;\r\n                } else if (Horizon === 'Medium') {\r\n                    SortId = newSortIndices.medium;\r\n                } else {\r\n                    SortId = newSortIndices.long;\r\n                }\r\n            } else {\r\n                SortId = 0\r\n            }\r\n            const AgeGroup: AgeTypes[] = [];\r\n            if (ageGroup20) {\r\n                AgeGroup.push(\"20\");\r\n            }\r\n            if (ageGroup30) {\r\n                AgeGroup.push(\"30\");\r\n            }\r\n            if (ageGroup40) {\r\n                AgeGroup.push(\"40\");\r\n            }\r\n            if (ageGroup50) {\r\n                AgeGroup.push(\"50\");\r\n            }\r\n            if (ageGroup60) {\r\n                AgeGroup.push(\"60\");\r\n            }\r\n            let Images: ImageInput[] = files.length > 0 ? [{\r\n                Dimension: 'Image',\r\n                URL: files[0].url\r\n            }] : [{\r\n                Dimension: \"Image\",\r\n                URL: currentImages[0].URL\r\n            }];\r\n            const vertical = currentImages.find(({Dimension}) => Dimension === 'VideoVertical');\r\n            const horizontal = currentImages.find(({Dimension}) => Dimension === 'VideoHorizontal');\r\n            if (verticalVideos && verticalVideos.length > 0) {\r\n                Images = [...Images, {\r\n                    Dimension: 'VideoVertical',\r\n                    URL: verticalVideos[0].url\r\n                }]\r\n            } else {\r\n                if (vertical) {\r\n                    Images = [...Images, vertical]\r\n                }\r\n            }\r\n            if (horizontalVideos && horizontalVideos.length > 0) {\r\n                Images = [...Images, {\r\n                    Dimension: 'VideoHorizontal',\r\n                    URL: horizontalVideos[0].url\r\n                }]\r\n            } else {\r\n                if (horizontal) {\r\n                    Images = [...Images, horizontal]\r\n                }\r\n            }\r\n            const goalData: GoalPost = {\r\n                Category,\r\n                ChecklistItems: tipsData.map<ITileDescription>(({title: Title, explanation: Description}) => ({Title, Description}) ),\r\n                Description,\r\n                GoalId,\r\n                MinRepaymentPeriod: hasBorrowed ? MinRepaymentPeriod : 0,\r\n                MaxRepaymentPeriod: hasBorrowed ? MaxRepaymentPeriod : 0,\r\n                Horizon,\r\n                Images,\r\n                Importance: {Title: '1-'+importance, Description: importanceExplanation},\r\n                Name,\r\n                SortId,\r\n                SumToReach: {Title: amount, Description: targetExplanation},\r\n                ThingsToConsider: [thingToConsider1, thingToConsider2, thingToConsider3],\r\n                ToBeAchived: {Title: tobeAchieved, Description: achievedExplanation},\r\n                IsPublished: isPublished,\r\n                CategoryColor: CategoryColor.label,\r\n                IsArchived: false,\r\n                AgeGroup\r\n            }\r\n            try {\r\n                setLoading(true);\r\n                const {message, error} = await putGoal(goalData);\r\n                setLoading(false);\r\n                if (error) {\r\n                    console.log(message);\r\n                } else {\r\n                    dispatch(setGoalForm(null));\r\n                    dispatch(setCurrentGoal(null));\r\n                    clearFiles();\r\n                    clearVerticalVideos();\r\n                    clearHorizontalVideos();\r\n                    history.push(\"/\");\r\n                }\r\n\r\n\r\n            } catch (e) {\r\n                setLoading(false);\r\n            }\r\n        } else if (goalFormData) {\r\n            let Images: ImageInput[] = files.length > 0 ? [{\r\n                Dimension: 'Image',\r\n                URL: files[0].url\r\n            }] : [];\r\n            if (verticalVideos && verticalVideos.length > 0) {\r\n                Images = [...Images, {\r\n                    Dimension: 'VideoVertical',\r\n                    URL: verticalVideos[0].url\r\n                }]\r\n            }\r\n            if (horizontalVideos && horizontalVideos.length > 0) {\r\n                Images = [...Images, {\r\n                    Dimension: 'VideoHorizontal',\r\n                    URL: horizontalVideos[0].url\r\n                }]\r\n            }\r\n            const {category: Category, description: Description,\r\n                horizon: Horizon, MinRepaymentPeriod, hasBorrowed, MaxRepaymentPeriod, importance, importanceExplanation,\r\n                name: Name, amount, targetExplanation, thingToConsider1,\r\n                thingToConsider2, thingToConsider3, CategoryColor, tobeAchieved, achievedExplanation, isPublished,\r\n            ageGroup20, ageGroup30, ageGroup40, ageGroup50, ageGroup60} = goalFormData;\r\n            const AgeGroup: AgeTypes[] = [];\r\n            if (ageGroup20) {\r\n                AgeGroup.push(\"20\");\r\n            }\r\n            if (ageGroup30) {\r\n                AgeGroup.push(\"30\");\r\n            }\r\n            if (ageGroup40) {\r\n                AgeGroup.push(\"40\");\r\n            }\r\n            if (ageGroup50) {\r\n                AgeGroup.push(\"50\");\r\n            }\r\n            if (ageGroup60) {\r\n                AgeGroup.push(\"60\");\r\n            }\r\n            let SortId = 0;\r\n            if (Horizon === 'Short') {\r\n                SortId = newSortIndices.short;\r\n            } else if (Horizon === 'Medium') {\r\n                SortId = newSortIndices.medium;\r\n            } else {\r\n                SortId = newSortIndices.long;\r\n            }\r\n            const newGoal: NewGoalPost = {\r\n                Category,\r\n                ChecklistItems: tipsData.map<ITileDescription>(({title: Title, explanation: Description}) => ({Title, Description}) ),\r\n                Description,\r\n                SortId,\r\n                Horizon,\r\n                MinRepaymentPeriod: hasBorrowed ? MinRepaymentPeriod : 0,\r\n                MaxRepaymentPeriod: hasBorrowed ? MaxRepaymentPeriod : 0,\r\n                Name,\r\n                Importance: {Title: importance, Description: importanceExplanation},\r\n                SumToReach: {Title: amount, Description: targetExplanation},\r\n                ToBeAchived: {Title: tobeAchieved, Description: achievedExplanation},\r\n                Images,\r\n                CategoryColor: CategoryColor.label,\r\n                IsArchived: false,\r\n                IsPublished: isPublished,\r\n                ThingsToConsider: [thingToConsider1, thingToConsider2, thingToConsider3],\r\n                AgeGroup,\r\n            }\r\n            try {\r\n                setLoading(true);\r\n                const {message, error} = await postNewGoal(newGoal);\r\n                setLoading(false);\r\n                if (error) {\r\n                    console.log(message);\r\n                } else {\r\n                    dispatch(setGoalForm(null));\r\n                    dispatch(setCurrentGoal(null));\r\n                    clearFiles();\r\n\r\n                    history.push(\"/\");\r\n                }\r\n\r\n            } catch (e) {\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container style={{padding: 0}}>\r\n            {loading && <Loading />}\r\n            <div className={navigationHeader}>\r\n                <BackNavigate onClick={onBack} />\r\n                <img src={logo} alt=\"logo\" />\r\n            </div>\r\n            <div className={root}>\r\n                <div className={tipContainerHeader}>\r\n                    <div>\r\n                        <Typography variant=\"h2\">\r\n                            Goal checklist items\r\n                        </Typography>\r\n                        <Typography variant=\"caption\">\r\n                            Add item or reorder them\r\n                        </Typography>\r\n                    </div>\r\n\r\n\r\n                    <Button disabled={addTipToggle}  onClick={onNewTip}  variant=\"contained\" size=\"medium\" color=\"primary\">\r\n                        Add item\r\n                    </Button>\r\n                </div>\r\n\r\n                {/*{addTipToggle && <TipCard onTipRemove={() => {}} onEdit={() => {}} onCancel={onNewTipCancel} onSave={onNewTipSave}  editable={true} cardData={{explanation: '', title: ''}} />}*/}\r\n\r\n                <SortableTipContainer  distance={1} lockAxis='y' axis=\"y\" onSortEnd={onSortEndTips} items={tipsData} onEdit={onCardEdit} onTipSave={onTipSave} onRemove={onTipRemove} onCancel={onCancel} />\r\n\r\n                {/*{tipsData.map((item, index) => <TipCard onTipRemove={() => {onTipRemove(index)}} onSave={(tipData) => {onTipSave(index, tipData)}} onCancel={() => onCardEdit(index, false)} key={index} onEdit={() => {onCardEdit(index, true)}} editable={!!item.editable} cardData={item} />)}*/}\r\n            </div>\r\n            <div className={submitContainer}>\r\n                <Button onClick={submitGoal} type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">\r\n                    Save this preset goal\r\n                </Button>\r\n            </div>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default GoalTips;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Policy\\styles.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\hooks\\s3Upload.ts",["271","272","273","274","275"],"D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalTips\\styles.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalAdd\\form.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\containers\\GoalAdd\\styles.ts",["276"],"import {makeStyles, SelectProps} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport const ErrorLabel = styled.span`\r\n   font-style: normal;\r\n   color: #f44336;\r\n   font-size: 12px;\r\n   line-height: 16px;\r\n   letter-spacing: 0.03333em;\r\n`;\r\n\r\nexport default makeStyles({\r\n    main: {\r\n        padding: 0,\r\n        '& form': {\r\n            marginTop: 20,\r\n            paddingLeft: 20\r\n        }\r\n    },\r\n    navigationHeader: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        margin: 0,\r\n        '& img': {\r\n            width: 40\r\n        }\r\n    },\r\n    formContainer: {\r\n        padding: '0 10px 10px 25px',\r\n        margin: 0,\r\n        height: 'calc(100vh - 155px)',\r\n        overflow: 'auto',\r\n        width: 'auto',\r\n        '& .MuiTypography-h3': {\r\n            color: '#0d2e6e',\r\n        },\r\n        '& .MuiTypography-h3:nth-child(1)': {\r\n            fontSize: 24,\r\n            textTransform: 'none',\r\n            fontWeight: 600,\r\n            marginBottom: 20\r\n        }\r\n    },\r\n    iconSelected: {\r\n        width: 17,\r\n        height: 17,\r\n        marginRight: 5,\r\n        marginLeft: -2,\r\n    },\r\n    color: {\r\n        width: 14,\r\n        height: 14,\r\n        flexShrink: 0,\r\n        borderRadius: 3,\r\n        border: '1px solid #8e8c8c',\r\n        marginRight: 8,\r\n        marginTop: 2,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    modalPaper: {\r\n        position: 'relative',\r\n        backgroundColor: '#FFF',\r\n        width: 'calc(100vw - 200px)',\r\n        overflow: 'auto',\r\n        border: '2px solid #000',\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2), 0px 5px 8px 0px rgba(0,0,0,0.14), 0px 1px 14px 0px rgba(0,0,0,0.12)',\r\n        padding: '0',\r\n        maxHeight: '100vh',\r\n        ['@media (max-width:1100px)']: {\r\n            marginBottom: 680\r\n        },\r\n        '& .MuiCard-root .MuiCardContent-root': {\r\n            padding: 0\r\n        }\r\n    },\r\n    autoCompleteInput: {\r\n        '& .MuiInput-underline': {\r\n            height: 46,\r\n            margin: '3px 0'\r\n        },\r\n        '& .MuiInputLabel-root': {\r\n          margin: '4px 16px',\r\n          color: '#0000008a',\r\n        },\r\n        '& .MuiInput-input.Mui-disabled': {\r\n            color: '#5E626B'\r\n        }\r\n    },\r\n    uploadCaption: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        '& .MuiTypography-caption': {\r\n            fontStyle: 'italic',\r\n            fontSize: '10px'\r\n        },\r\n        '& .MuiButton-outlinedPrimary' : {\r\n            display: 'block',\r\n            width: '90px',\r\n            height: '38px',\r\n            marginTop: '8px',\r\n            '& .MuiButton-label' : {\r\n                textTransform: 'none',\r\n                fontSize: '14px',\r\n                margin: 0,\r\n            }\r\n        }\r\n    },\r\n    uploadPlaceholder: {\r\n        display: 'flex',\r\n        width: '85px',\r\n        height: '85px',\r\n        marginRight: '30px',\r\n        border: '2px solid #FAFCFF',\r\n        borderRadius: '50%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        color: '#B0B3B9',\r\n        flexDirection: 'column',\r\n        background: '#F0F2F5',\r\n        boxShadow: '0px 0px 4px rgba(89, 57, 227, 0.55)',\r\n        '& img': {\r\n            width: '85px',\r\n            height: '85px',\r\n            borderRadius: '50%',\r\n        }\r\n    },\r\n    uploadContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'start',\r\n        padding: '5px 0',\r\n        width: '450px',\r\n    },\r\n    fieldContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '15px',\r\n        maxWidth: 450,\r\n    },\r\n    errorText: {\r\n        marginTop: -4,\r\n        fontSize: 12,\r\n        lineHeight: '16px',\r\n        color: '#f44336',\r\n        fontFamily: `'Inter', sans-serif`,\r\n        fontWeight: 400,\r\n        letterSpacing: '0.4px',\r\n    },\r\n    thingsContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: 10,\r\n      '& .MuiTextField-root': {\r\n        flexGrow: 1\r\n      },\r\n      '& .MuiSvgIcon-root': {\r\n          fontSize: 14\r\n      }\r\n    },\r\n    submitContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        paddingRight: '40px',\r\n\r\n        '& .MuiButton-contained' : {\r\n            width: '115px',\r\n            height: '40px',\r\n            textTransform: 'none',\r\n            '& .MuiButton-label': {\r\n                fontSize: '14px'\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\nexport const selectProps: Partial<SelectProps> = {\r\n    MenuProps:{\r\n        PaperProps: {\r\n            style: {\r\n                width: '190px',\r\n                marginTop: '5px',\r\n                boxShadow: '0px 4px 4px rgba(51, 51, 51, 0.5), 0px 14px 24px rgba(51, 51, 51, 0.5)',\r\n                borderRadius: '4px',\r\n            }\r\n        },\r\n        anchorReference: 'anchorEl',\r\n        anchorOrigin: {\r\n            horizontal: 'left',\r\n            vertical: 'bottom'\r\n        },\r\n        getContentAnchorEl: null\r\n    }\r\n};\r\n","D:\\dev\\pennyworth-adminpanel\\src\\containers\\Home\\styles.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\Link.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\hooks\\useLocalStorage.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\api\\Policy\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\BackNavigate\\index.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\index.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Goals\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\TipCard\\index.tsx",["277"],"import React, {FC} from \"react\";\r\nimport TipCardEditable from \"./CardEditable\";\r\nimport TipCardNonEditable from \"./CardNonEditable\";\r\nimport {SortableContainer, SortableContainerProps, SortableElement, SortableElementProps} from \"react-sortable-hoc\";\r\nimport {TipData} from \"../../containers/GoalTips\";\r\nexport interface TipCardData {\r\n    title: string;\r\n    explanation: string;\r\n}\r\nexport interface TipCardProps extends SortableElementProps{\r\n    editable: boolean;\r\n    cardData: TipCardData;\r\n    onEdit: () => void;\r\n    onCancel: () => void;\r\n    onSave: (tipData: TipCardData) => void;\r\n    onTipRemove: () => void\r\n}\r\n\r\ntype emptyFunction = () => void\r\ntype tipSaveFunction = (i:number, tipData: TipCardData, id: string) => void\r\ntype indexFunction =  (i: number) => void;\r\ntype  cancelFunction =  (i: number, id: string) => void;\r\ntype EditableFunction = (i: number, editable: boolean) => void\r\nexport interface SortableTipCardsProps extends SortableContainerProps {\r\n    items: TipData[];\r\n    onEdit: EditableFunction | emptyFunction;\r\n    onTipSave:  tipSaveFunction | emptyFunction;\r\n    onRemove:  indexFunction | emptyFunction;\r\n    onCancel: cancelFunction | emptyFunction;\r\n}\r\n\r\nconst TipCard = SortableElement(({editable, cardData, onEdit, onCancel, onSave, onTipRemove}: TipCardProps) => {\r\n    return (\r\n        editable ? <TipCardEditable onSave={onSave} onCancel={onCancel} cardData={cardData}  /> : <TipCardNonEditable onRemove={onTipRemove} onEdit={onEdit} cardData={cardData} />\r\n    )\r\n})\r\n\r\nconst SortableTipContainer = SortableContainer(({items, onRemove, onCancel, onEdit, onTipSave }: SortableTipCardsProps) => {\r\n    return (\r\n        <div>\r\n\r\n            {items.map((item, index) => <TipCard index={index} onTipRemove={() => {onRemove(index)}} onSave={(tipData) => {onTipSave(index, tipData, (item.id || \"\"))}} onCancel={() => onCancel(index, (item.id || \"\"))} key={`key-${item.id}-${item.editable}`} onEdit={() => {onEdit(index, true)}} editable={!!item.editable} cardData={item} />)}\r\n\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n    TipCard,\r\n    SortableTipContainer\r\n}\r\n","D:\\dev\\pennyworth-adminpanel\\src\\components\\TabPanel\\index.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\blockStyle.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\linkStyle.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\inlineStyle.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\Goals\\Container.tsx",["278","279","280"],"import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {SortableContainerProps, SortableContainer} from \"react-sortable-hoc\";\r\nimport {ICategorizedGoals, IGoalTemplate} from \"../../api/types\";\r\nimport SortableItem, {GoalItem} from \"./Item\";\r\nexport interface NewGoalType {\r\n    SortId: number;\r\n    Image: string;\r\n    Category: string;\r\n    GoalId: string;\r\n    Horizon: string;\r\n    IsPublished: boolean;\r\n}\r\nexport interface SortableListProps extends SortableContainerProps{\r\n    items: NewGoalType[],\r\n}\r\nconst GoalsContainer =   SortableContainer(({items}: SortableListProps) => {\r\n    return (\r\n            <Grid alignItems=\"center\"  container spacing={3}>\r\n                {items.filter(({IsPublished}) => IsPublished).map((item, index) => (\r\n                    <SortableItem index={index} key={`key-${item.SortId}`} value={item} />\r\n                ))}\r\n            </Grid>\r\n    )\r\n});\r\nexport const UnpublishedGoalContainer: FC<{ items: NewGoalType[] }> = ({items}) => {\r\n    return (\r\n        <Grid alignItems=\"center\"  container spacing={3}>\r\n\r\n            {items.filter(({IsPublished}) => !IsPublished).map((item, index) => (\r\n                <GoalItem index={index} key={`key-${item.SortId}`} value={item} />\r\n            ))}\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default GoalsContainer;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\components\\Goals\\Item.tsx",["281","282","283","284","285"],"import React, {FC, useState} from \"react\";\r\nimport {SortableElementProps, SortableElement, WrappedComponent} from \"react-sortable-hoc\";\r\nimport {getCurrentGoal} from \"store/actions/goalActions\";\r\n\r\nimport {IGoalTemplate} from \"../../api/types\";\r\nimport {\r\n    Card,\r\n    CardActionArea,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Grid,\r\n    IconButton,\r\n    Typography,\r\n    makeStyles\r\n} from \"@material-ui/core\";\r\nimport {DeleteForeverSharp, EditSharp} from \"@material-ui/icons\";\r\nimport {NewGoalType} from \"./Container\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AppDispatch, AppThunkDispatch} from \"../../store/types\";\r\nimport {useHistory} from \"react-router\";\r\n\r\n\r\nexport interface SortableItemProps extends SortableElementProps {\r\n    value: NewGoalType;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    media: {\r\n        height: 120,\r\n    },\r\n    cardContent: {\r\n        padding: '6px 8px 0px 8px',\r\n        '& .MuiTypography-h5': {\r\n            fontSize: 15,\r\n            overflow: 'hidden',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n        }\r\n    },\r\n    cardActionContainer: {\r\n        justifyContent: 'flex-end',\r\n        '& .MuiIconButton-root': {\r\n            padding: 4\r\n        }\r\n    },\r\n    sortId4: {\r\n        backgroundColor: '#FF0000'\r\n    },\r\n    iconStyle: {\r\n        fontSize: 20\r\n    }\r\n})\r\n\r\nexport const GoalItem: WrappedComponent<SortableItemProps> = ({value: {Image, Category, SortId, GoalId, Horizon, IsPublished}}: SortableItemProps) => {\r\n    const { media, cardContent, cardActionContainer, sortId4, iconStyle } = useStyles();\r\n    const dispatch = useDispatch<AppThunkDispatch>();\r\n    const history = useHistory();\r\n    const onEdit = async () => {\r\n        localStorage.removeItem('files');\r\n        localStorage.removeItem('verticalVideo');\r\n        localStorage.removeItem('horizontalVideo');\r\n        await dispatch(getCurrentGoal(Horizon, GoalId));\r\n        history.push(\"/goalsAdd\")\r\n    }\r\n    const [elevation, setElevation] = useState<number>(1);\r\n    return (\r\n        <Grid item xs={3}>\r\n            <Card elevation={elevation} onMouseOver={() => { setElevation(3)}} onMouseOut={() => { setElevation(1)}} >\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={media}\r\n                        image={Image}\r\n                        title=\"Contemplative Reptile\"\r\n                    />\r\n                    <CardContent className={cardContent}>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {Category}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions className={cardActionContainer}>\r\n                    {/*<IconButton size=\"small\" ari-label=\"delete\">*/}\r\n                    {/*    <DeleteForeverSharp style={{color: '#EE4B63'}} className={iconStyle} />*/}\r\n                    {/*</IconButton>*/}\r\n                    <IconButton size=\"small\"  onClick={onEdit} ari-label=\"Edit\">\r\n                        <EditSharp className={iconStyle} />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default SortableElement(GoalItem);\r\n","D:\\dev\\pennyworth-adminpanel\\src\\components\\TipCard\\CardNonEditable.tsx",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\TipCard\\CardEditable.tsx",["286"],"import React, {FC, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport {Button, makeStyles, TextField} from \"@material-ui/core\";\r\nimport {TipCardData} from \"./index\";\r\nimport {object, string} from \"yup\";\r\n\r\ninterface CardEditableProps {\r\n    cardData: TipCardData;\r\n    onCancel: () => void;\r\n    onSave: (tipData: TipCardData) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    tipCard: {\r\n        backgroundColor: '#FFF',\r\n        boxShadow: '0 1px 0 rgb(9 30 66 / 25%)',\r\n        borderRadius: 4,\r\n        marginBottom: 8,\r\n        padding: 15,\r\n        minHeight: 60,\r\n        '& .MuiTypography-body2': {\r\n            color: '#94979F'\r\n        },\r\n        '& .MuiTypography-h5': {\r\n            color: '#0d2e6e',\r\n            lineHeight: 2\r\n        }\r\n    },\r\n    inputContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: 15,\r\n    },\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        margin: '15px 0 0',\r\n        gap: 15,\r\n        '& .MuiButton-root': {\r\n            minWidth: 110\r\n        }\r\n    },\r\n});\r\n\r\nconst schema = object().shape({\r\n    title: string().required('Title is required'),\r\n    explanation: string().required('Explanation is required'),\r\n})\r\n\r\nconst TipCardEditable: FC<CardEditableProps> = ({cardData, onCancel, onSave}) => {\r\n    const {tipCard, buttonContainer, inputContainer} = useStyles();\r\n    const {register, handleSubmit, errors} = useForm<TipCardData>({\r\n        criteriaMode: 'all',\r\n        mode: 'onChange',\r\n        resolver: yupResolver(schema),\r\n        defaultValues: cardData\r\n    });\r\n    const onFormSubmit = (formData: TipCardData) => {\r\n        onSave(formData);\r\n    }\r\n    const onTipCancel = () => {\r\n        onCancel();\r\n    }\r\n    return (\r\n        <div  className={tipCard}>\r\n            <form onSubmit={handleSubmit(onFormSubmit)}>\r\n                <div className={inputContainer}>\r\n                    <TextField className=\"clickable\"\r\n                        inputRef={register}\r\n                        error={!!errors.title}\r\n                        helperText={errors.title ? errors.title.message : ''}\r\n                        name=\"title\"\r\n                        label=\"Checklist item\" />\r\n                    <TextField\r\n                        className=\"clickable\"\r\n                        inputRef={register}\r\n                        error={!!errors.explanation}\r\n                        helperText={errors.explanation ? errors.explanation.message : ''}\r\n                        name=\"explanation\"\r\n                        rows={5} rowsMax={5} multiline label=\"Explanation\"  />\r\n                </div>\r\n                <div className={buttonContainer}>\r\n                    <Button className=\"clickable\" type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">\r\n                        Save\r\n                    </Button>\r\n                    <Button className=\"clickable\" onClick={onTipCancel}  variant=\"outlined\" size=\"small\" color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TipCardEditable;\r\n","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\constants.tsx",["287"],"import {FormatBold, FormatItalic, FormatQuote, FormatListBulleted, FormatListNumbered} from \"@material-ui/icons\";\r\nimport {ReactElement} from \"react\";\r\n\r\nexport interface InlineItemsProps {\r\n    label: string;\r\n    style: string;\r\n    icon?: ReactElement;\r\n}\r\nexport type BlockItemsProps = InlineItemsProps;\r\n\r\n\r\nexport const blocks: BlockItemsProps[] = [\r\n    {\r\n        label: 'H1',\r\n        style: 'header-one'\r\n    },\r\n    {\r\n        label: 'H2',\r\n        style: 'header-two'\r\n    },\r\n    {\r\n        label: 'H3',\r\n        style: 'header-three'\r\n    },\r\n    {\r\n        label: 'H4',\r\n        style: 'header-four'\r\n    },\r\n    {\r\n        label: 'UL',\r\n        style: 'unordered-list-item',\r\n        icon: <FormatListBulleted style={{color: 'inherit'}} />\r\n    },\r\n    {\r\n        label: 'OL',\r\n        style: 'ordered-list-item',\r\n        icon: <FormatListNumbered style={{color: 'inherit'}} />\r\n    }\r\n\r\n]\r\n\r\nexport const inlines: InlineItemsProps[]  = [\r\n    {\r\n        label: 'bold',\r\n        style: \"BOLD\",\r\n        icon: <FormatBold style={{color: 'inherit'}} />\r\n    },\r\n    {\r\n        label: 'italic',\r\n        style: \"ITALIC\",\r\n        icon: <FormatItalic style={{color: 'inherit'}} />\r\n    },\r\n]\r\n","D:\\dev\\pennyworth-adminpanel\\src\\components\\Toolbar\\common.tsx",["288"],"import React from \"react\";\r\nimport styled from \"styled-components\"\r\n\r\nexport interface ToolbarItemProps {\r\n    isActive?: boolean;\r\n}\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  margin-right: 7px;\r\n`\r\n\r\nexport const ToolbarItem = styled.div<ToolbarItemProps>`\r\n  width: 28px;\r\n  height: 27px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 5px;\r\n  box-shadow: 0 0 3px 1px rgba(15, 15, 15, 0.17);\r\n  background-color: #FFF;\r\n  color: #0d2e6e;\r\n  font-size: 16px;\r\n  font-family: Oxygen sans-serif;\r\n  transition: all 250ms ease-in-out;\r\n  cursor: pointer;\r\n  \r\n  ${props => props.isActive && \r\n  `\r\n  \r\n  transform: translateY(1px);\r\n  color: #FFF;\r\n  background-color: #0d2e6e;\r\n  box-shadow: none;\r\n  border: 1px solid #34495E;\r\n  `\r\n}\r\n  &:hover {\r\n    transform: translateY(1px);\r\n    color: #FFF;\r\n    background-color: #0d2e6e;\r\n    box-shadow: none;\r\n    border: 1px solid #34495E;\r\n  }\r\n  \r\n`\r\n","D:\\dev\\pennyworth-adminpanel\\src\\components\\icons\\index.ts",[],"D:\\dev\\pennyworth-adminpanel\\src\\components\\icons\\EditIcon.tsx",[],{"ruleId":"289","replacedBy":"290"},{"ruleId":"291","replacedBy":"292"},{"ruleId":"293","severity":1,"message":"294","line":4,"column":8,"nodeType":"295","messageId":"296","endLine":4,"endColumn":14},{"ruleId":"293","severity":1,"message":"297","line":7,"column":8,"nodeType":"295","messageId":"296","endLine":7,"endColumn":17},{"ruleId":"293","severity":1,"message":"298","line":2,"column":8,"nodeType":"295","messageId":"296","endLine":2,"endColumn":12},{"ruleId":"299","severity":1,"message":"300","line":77,"column":17,"nodeType":"301","messageId":"302","endLine":79,"endColumn":18,"fix":"303"},{"ruleId":"299","severity":1,"message":"304","line":333,"column":9,"nodeType":"301","messageId":"302","endLine":336,"endColumn":10,"fix":"305"},{"ruleId":"293","severity":1,"message":"306","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":24},{"ruleId":"293","severity":1,"message":"307","line":2,"column":8,"nodeType":"295","messageId":"296","endLine":2,"endColumn":15},{"ruleId":"293","severity":1,"message":"308","line":3,"column":19,"nodeType":"295","messageId":"296","endLine":3,"endColumn":29},{"ruleId":"293","severity":1,"message":"309","line":6,"column":8,"nodeType":"295","messageId":"296","endLine":6,"endColumn":15},{"ruleId":"293","severity":1,"message":"310","line":1,"column":9,"nodeType":"295","messageId":"296","endLine":1,"endColumn":22},{"ruleId":"293","severity":1,"message":"311","line":1,"column":20,"nodeType":"295","messageId":"296","endLine":1,"endColumn":29},{"ruleId":"293","severity":1,"message":"312","line":2,"column":40,"nodeType":"295","messageId":"296","endLine":2,"endColumn":47},{"ruleId":"293","severity":1,"message":"313","line":5,"column":9,"nodeType":"295","messageId":"296","endLine":5,"endColumn":18},{"ruleId":"293","severity":1,"message":"314","line":5,"column":20,"nodeType":"295","messageId":"296","endLine":5,"endColumn":26},{"ruleId":"293","severity":1,"message":"315","line":5,"column":28,"nodeType":"295","messageId":"296","endLine":5,"endColumn":36},{"ruleId":"293","severity":1,"message":"316","line":6,"column":9,"nodeType":"295","messageId":"296","endLine":6,"endColumn":13},{"ruleId":"317","severity":1,"message":"318","line":83,"column":17,"nodeType":"319","endLine":83,"endColumn":37},{"ruleId":"293","severity":1,"message":"320","line":2,"column":17,"nodeType":"295","messageId":"296","endLine":2,"endColumn":26},{"ruleId":"293","severity":1,"message":"321","line":26,"column":52,"nodeType":"295","messageId":"296","endLine":26,"endColumn":68},{"ruleId":"293","severity":1,"message":"322","line":33,"column":11,"nodeType":"295","messageId":"296","endLine":33,"endColumn":17},{"ruleId":"323","severity":1,"message":"324","line":55,"column":8,"nodeType":"325","endLine":55,"endColumn":10,"suggestions":"326"},{"ruleId":"293","severity":1,"message":"320","line":2,"column":17,"nodeType":"295","messageId":"296","endLine":2,"endColumn":26},{"ruleId":"293","severity":1,"message":"327","line":50,"column":27,"nodeType":"295","messageId":"296","endLine":50,"endColumn":38},{"ruleId":"323","severity":1,"message":"324","line":57,"column":8,"nodeType":"325","endLine":57,"endColumn":10,"suggestions":"328"},{"ruleId":"293","severity":1,"message":"329","line":2,"column":28,"nodeType":"295","messageId":"296","endLine":2,"endColumn":32},{"ruleId":"293","severity":1,"message":"330","line":2,"column":34,"nodeType":"295","messageId":"296","endLine":2,"endColumn":44},{"ruleId":"323","severity":1,"message":"331","line":67,"column":8,"nodeType":"325","endLine":67,"endColumn":10,"suggestions":"332"},{"ruleId":"293","severity":1,"message":"333","line":77,"column":11,"nodeType":"295","messageId":"296","endLine":77,"endColumn":19},{"ruleId":"323","severity":1,"message":"334","line":94,"column":8,"nodeType":"325","endLine":94,"endColumn":20,"suggestions":"335"},{"ruleId":"293","severity":1,"message":"336","line":4,"column":8,"nodeType":"295","messageId":"296","endLine":4,"endColumn":22},{"ruleId":"293","severity":1,"message":"337","line":24,"column":21,"nodeType":"295","messageId":"296","endLine":24,"endColumn":31},{"ruleId":"293","severity":1,"message":"338","line":24,"column":46,"nodeType":"295","messageId":"296","endLine":24,"endColumn":64},{"ruleId":"293","severity":1,"message":"339","line":25,"column":40,"nodeType":"295","messageId":"296","endLine":25,"endColumn":52},{"ruleId":"293","severity":1,"message":"340","line":27,"column":8,"nodeType":"295","messageId":"296","endLine":27,"endColumn":21},{"ruleId":"293","severity":1,"message":"341","line":39,"column":96,"nodeType":"295","messageId":"296","endLine":39,"endColumn":105},{"ruleId":"293","severity":1,"message":"342","line":47,"column":27,"nodeType":"295","messageId":"296","endLine":47,"endColumn":43},{"ruleId":"293","severity":1,"message":"343","line":104,"column":27,"nodeType":"295","messageId":"296","endLine":104,"endColumn":38},{"ruleId":"293","severity":1,"message":"344","line":172,"column":20,"nodeType":"295","messageId":"296","endLine":172,"endColumn":21},{"ruleId":"323","severity":1,"message":"345","line":205,"column":8,"nodeType":"325","endLine":205,"endColumn":10,"suggestions":"346"},{"ruleId":"293","severity":1,"message":"347","line":236,"column":11,"nodeType":"295","messageId":"296","endLine":236,"endColumn":26},{"ruleId":"293","severity":1,"message":"348","line":240,"column":11,"nodeType":"295","messageId":"296","endLine":240,"endColumn":19},{"ruleId":"293","severity":1,"message":"349","line":244,"column":11,"nodeType":"295","messageId":"296","endLine":244,"endColumn":25},{"ruleId":"350","severity":1,"message":"351","line":349,"column":37,"nodeType":"319","endLine":349,"endColumn":80},{"ruleId":"350","severity":1,"message":"351","line":350,"column":50,"nodeType":"319","endLine":350,"endColumn":91},{"ruleId":"293","severity":1,"message":"339","line":14,"column":29,"nodeType":"295","messageId":"296","endLine":14,"endColumn":41},{"ruleId":"293","severity":1,"message":"340","line":18,"column":8,"nodeType":"295","messageId":"296","endLine":18,"endColumn":21},{"ruleId":"323","severity":1,"message":"352","line":41,"column":8,"nodeType":"325","endLine":41,"endColumn":10,"suggestions":"353"},{"ruleId":"293","severity":1,"message":"354","line":71,"column":11,"nodeType":"295","messageId":"296","endLine":71,"endColumn":25},{"ruleId":"293","severity":1,"message":"355","line":74,"column":11,"nodeType":"295","messageId":"296","endLine":74,"endColumn":23},{"ruleId":"293","severity":1,"message":"311","line":1,"column":32,"nodeType":"295","messageId":"296","endLine":1,"endColumn":41},{"ruleId":"293","severity":1,"message":"356","line":7,"column":23,"nodeType":"295","messageId":"296","endLine":7,"endColumn":37},{"ruleId":"293","severity":1,"message":"357","line":18,"column":7,"nodeType":"295","messageId":"296","endLine":18,"endColumn":15},{"ruleId":"293","severity":1,"message":"358","line":70,"column":27,"nodeType":"295","messageId":"296","endLine":70,"endColumn":36},{"ruleId":"293","severity":1,"message":"359","line":72,"column":27,"nodeType":"295","messageId":"296","endLine":72,"endColumn":35},{"ruleId":"299","severity":1,"message":"360","line":74,"column":9,"nodeType":"301","messageId":"302","endLine":76,"endColumn":10,"fix":"361"},{"ruleId":"293","severity":1,"message":"362","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":18},{"ruleId":"293","severity":1,"message":"363","line":2,"column":15,"nodeType":"295","messageId":"296","endLine":2,"endColumn":25},{"ruleId":"293","severity":1,"message":"364","line":4,"column":9,"nodeType":"295","messageId":"296","endLine":4,"endColumn":26},{"ruleId":"293","severity":1,"message":"365","line":4,"column":28,"nodeType":"295","messageId":"296","endLine":4,"endColumn":41},{"ruleId":"293","severity":1,"message":"362","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":18},{"ruleId":"293","severity":1,"message":"365","line":5,"column":9,"nodeType":"295","messageId":"296","endLine":5,"endColumn":22},{"ruleId":"293","severity":1,"message":"366","line":17,"column":9,"nodeType":"295","messageId":"296","endLine":17,"endColumn":27},{"ruleId":"293","severity":1,"message":"367","line":20,"column":9,"nodeType":"295","messageId":"296","endLine":20,"endColumn":20},{"ruleId":"293","severity":1,"message":"368","line":56,"column":54,"nodeType":"295","messageId":"296","endLine":56,"endColumn":61},{"ruleId":"293","severity":1,"message":"369","line":1,"column":20,"nodeType":"295","messageId":"296","endLine":1,"endColumn":28},{"ruleId":"293","severity":1,"message":"370","line":1,"column":35,"nodeType":"295","messageId":"296","endLine":1,"endColumn":46},{"ruleId":"293","severity":1,"message":"371","line":1,"column":8,"nodeType":"295","messageId":"296","endLine":1,"endColumn":13},"no-native-reassign",["372"],"no-negated-in-lhs",["373"],"@typescript-eslint/no-unused-vars","'routes' is defined but never used.","Identifier","unusedVar","'NavDrawer' is defined but never used.","'type' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['@media (min-width:1280px)'] found.","Property","unnecessarilyComputedProperty",{"range":"374","text":"375"},"Unnecessarily computed property ['@media (min-width:1480px)'] found.",{"range":"376","text":"377"},"'Suspense' is defined but never used.","'Loading' is defined but never used.","'MainRouter' is defined but never used.","'history' is defined but never used.","'GoalsOrderIds' is defined but never used.","'useEffect' is defined but never used.","'Divider' is defined but never used.","'PeopleAlt' is defined but never used.","'Search' is defined but never used.","'Settings' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Container' is defined but never used.","'navigationHeader' is assigned a value but never used.","'onBack' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'decorator'. Either include it or remove the dependency array.","ArrayExpression",["378"],"'editorState' is assigned a value but never used.",["379"],"'Grid' is defined but never used.","'makeStyles' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'fetchActionCreator'. Either include them or remove the dependency array. If 'fetchActionCreator' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["380"],"'allGoals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'unpublishedGoals.long', 'unpublishedGoals.medium', and 'unpublishedGoals.short'. Either include them or remove the dependency array.",["381"],"'VideoThumbnail' is defined but never used.","'FieldError' is defined but never used.","'SubmitErrorHandler' is defined but never used.","'ImageActions' is defined but never used.","'useFileUpload' is defined but never used.","'errorText' is assigned a value but never used.","'setCategoryColor' is assigned a value but never used.","'hasBorrowed' is assigned a value but never used.","'_' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clearFiles', 'clearHorizontalVideo', 'clearVerticalVideo', 'currentGoal', 'files', 'getValues', 'goalFormData', and 'setValue'. Either include them or remove the dependency array.",["382"],"'onControlChange' is assigned a value but never used.","'getOpObj' is assigned a value but never used.","'getOptionLabel' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has a missing dependency: 'currentGoal'. Either include it or remove the dependency array.",["383"],"'onNewTipCancel' is assigned a value but never used.","'onNewTipSave' is assigned a value but never used.","'putSignedAsset' is defined but never used.","'s3Client' is assigned a value but never used.","'extension' is assigned a value but never used.","'filename' is assigned a value but never used.","Unnecessarily computed property ['@media (max-width:1100px)'] found.",{"range":"384","text":"385"},"'FC' is defined but never used.","'Typography' is defined but never used.","'ICategorizedGoals' is defined but never used.","'IGoalTemplate' is defined but never used.","'DeleteForeverSharp' is defined but never used.","'AppDispatch' is defined but never used.","'sortId4' is assigned a value but never used.","'useState' is defined but never used.","'FormatQuote' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",[2078,2107],"'@media (min-width:1280px)'",[10315,10344],"'@media (min-width:1480px)'",{"desc":"386","fix":"387"},{"desc":"386","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},[1845,1874],"'@media (max-width:1100px)'","Update the dependencies array to be: [decorator]",{"range":"397","text":"398"},{"range":"399","text":"398"},"Update the dependencies array to be: [dispatch, fetchActionCreator]",{"range":"400","text":"401"},"Update the dependencies array to be: [briefGoals, unpublishedGoals.long, unpublishedGoals.medium, unpublishedGoals.short]",{"range":"402","text":"403"},"Update the dependencies array to be: [clearFiles, clearHorizontalVideo, clearVerticalVideo, currentGoal, files, getValues, goalFormData, setValue]",{"range":"404","text":"405"},"Update the dependencies array to be: [currentGoal]",{"range":"406","text":"407"},[2099,2101],"[decorator]",[2139,2141],[2556,2558],"[dispatch, fetchActionCreator]",[3969,3981],"[briefGoals, unpublishedGoals.long, unpublishedGoals.medium, unpublishedGoals.short]",[9650,9652],"[clearFiles, clearHorizontalVideo, clearVerticalVideo, currentGoal, files, getValues, goalFormData, setValue]",[2320,2322],"[currentGoal]"]